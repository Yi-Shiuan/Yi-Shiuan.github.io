{
    "componentChunkName": "component---src-pages-index-tsx",
    "path": "/page/3",
    "result": {"data":{"my":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/3493db206b99402b692b66e97cbad111/a776c/myimage.jpg","srcSet":"/static/3493db206b99402b692b66e97cbad111/a776c/myimage.jpg 20w,\n/static/3493db206b99402b692b66e97cbad111/8e0a7/myimage.jpg 750w,\n/static/3493db206b99402b692b66e97cbad111/e972b/myimage.jpg 1080w,\n/static/3493db206b99402b692b66e97cbad111/e36e6/myimage.jpg 1366w,\n/static/3493db206b99402b692b66e97cbad111/ba08e/myimage.jpg 1920w","sizes":"(min-width: 20px) 20px, 100vw"},"sources":[{"srcSet":"/static/3493db206b99402b692b66e97cbad111/bf926/myimage.webp 20w,\n/static/3493db206b99402b692b66e97cbad111/30bd7/myimage.webp 750w,\n/static/3493db206b99402b692b66e97cbad111/d5fd5/myimage.webp 1080w,\n/static/3493db206b99402b692b66e97cbad111/4b410/myimage.webp 1366w,\n/static/3493db206b99402b692b66e97cbad111/c33e2/myimage.webp 1920w","type":"image/webp","sizes":"(min-width: 20px) 20px, 100vw"}]},"width":20,"height":27}},"allMdx":{"edges":[{"node":{"id":"daad31a0-f0bc-5ef1-8ba9-9d9dd2cadea4","frontmatter":{"title":"Redis Data Types 介紹","description":"Redis在4.0之前其實只有5個資料型態，不過到了現在新的版本多了一些不同的形態如stream, geo等等，不過本篇只會針對原有的string, sort set, hash set, set, list這五個形態來做說明。","date":"20 Aug 2020"},"fields":{"path":"/2020/08/20/redis-data-types"}}},{"node":{"id":"2b424c01-9045-556f-a4d8-fb12fd7f9436","frontmatter":{"title":"[ProtoBuf] ProtoBuf Serialize 與 DeSerialize！","description":"這一篇應該是我ProtoBuf的系列文章第二篇，上一篇只簡單說了一些安裝方式與一些定義檔 的設定根本就不知道該如何使用這一個好用的序列化工具。依樣會是使用protobuf-net 這一個套件來做一個簡單的紀錄。","date":"07 Oct 2016"},"fields":{"path":"/2016/10/08/protobuf-serialize-and-deserialize"}}},{"node":{"id":"9dcea2db-7036-5649-9fe7-0da6ac7d2488","frontmatter":{"title":"[ProtoBuf] 初次見面","description":"目前會採用ProtoBuf序列化是因為先前使用JSON有效能上的問題與在存取Redis上產生較高的延遲，所以改採用ProtoBuf來作為資料序列化與存放到Redis的主要格式。雖然在閱讀上需要自己寫小工具做轉譯，但在一般情況擁有較好的效能展現。","date":"06 Oct 2016"},"fields":{"path":"/2016/10/06/protobuf-first-meet"}}},{"node":{"id":"ff5f0202-4d81-5ae2-8bb3-b086cd074f1d","frontmatter":{"title":"【Redis】Redis Pub/Sub 製作應用程式間推播通知","description":"在很多時候我們的部屬環境是很複雜的，無法使用單一個應用程式來解決我們的問題...（例如：Windows server與Linux Server、多個網站或多個不同類型執行個體、網站搭配console應用程式）此時當應用程式間需要配合時是一個很重要的議題，很多人會把資料存放到資料庫，應用程式在定期去擷取尚未處理的資料，等相關資料處理完畢後再到資料庫注記哪些記錄是已經處理完畢的，在這樣的軟體設計與環境相對簡單許多，但是在系統繁忙的時間中，這可不是一個樂觀的狀態了..\n現在Redis具有這樣的功能，可以協助我們設計應用程式間可以互相配合的一個機制，如此一來我們就不需要在透過定期存取資料庫，相關的訊息或相關的資料可以及時的處理！","date":"24 Feb 2016"},"fields":{"path":"/2016/02/24/redis-pub-sub-application-notification"}}}],"pageInfo":{"currentPage":3,"totalCount":24,"perPage":10,"hasPreviousPage":true,"hasNextPage":false}}},"pageContext":{"pageNumber":2,"humanPageNumber":3,"skip":20,"limit":10,"numberOfPages":3,"previousPagePath":"/page/2","nextPagePath":""}},
    "staticQueryHashes": ["2069471281","2579648174","3564308881","3673915224"]}