{
    "componentChunkName": "component---src-pages-posts-tsx",
    "path": "/posts/",
    "result": {"data":{"mdx":{"id":"9aeafde6-c44e-5cd4-b8ac-127bcb296c8b","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"弱點掃描-SSL加密演算法不安全的演算法\",\n  \"description\": \"最近公司資安檢查報告中被檢查出了一個關於SSL的加密連線的弱點，這個弱點是因為我們沒有把不安全的加密演算法關閉導致這個弱點的產生， 在公司的政策中線上的伺服器不能任意安裝任何程式，所以`IISCrypto`就只能放棄無法使用，所以我修改的部分是使用修改幾碼的方式進行， 由於我不太熟悉資安，修改後要如何驗證呢這些已知有問題的演算法是否已經正確的被關閉了呢？\",\n  \"date\": \"2022-01-03T00:00:00.000Z\",\n  \"tags\": [\"vulnerability\", \"ssl\"],\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u6700\\u8FD1\\u516C\\u53F8\\u8CC7\\u5B89\\u6AA2\\u67E5\\u5831\\u544A\\u4E2D\\u88AB\\u6AA2\\u67E5\\u51FA\\u4E86\\u4E00\\u500B\\u95DC\\u65BCSSL\\u7684\\u52A0\\u5BC6\\u9023\\u7DDA\\u7684\\u5F31\\u9EDE\\uFF0C\\u9019\\u500B\\u5F31\\u9EDE\\u662F\\u56E0\\u70BA\\u6211\\u5011\\u6C92\\u6709\\u628A\\u4E0D\\u5B89\\u5168\\u7684\\u52A0\\u5BC6\\u6F14\\u7B97\\u6CD5\\u95DC\\u9589\\u5C0E\\u81F4\\u9019\\u500B\\u5F31\\u9EDE\\u7684\\u7522\\u751F\\uFF0C\\n\\u5728\\u516C\\u53F8\\u7684\\u653F\\u7B56\\u4E2D\\u7DDA\\u4E0A\\u7684\\u4F3A\\u670D\\u5668\\u4E0D\\u80FD\\u4EFB\\u610F\\u5B89\\u88DD\\u4EFB\\u4F55\\u7A0B\\u5F0F\\uFF0C\\u6240\\u4EE5\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IISCrypto\"), \"\\u5C31\\u53EA\\u80FD\\u653E\\u68C4\\u7121\\u6CD5\\u4F7F\\u7528\\uFF0C\\u6240\\u4EE5\\u6211\\u4FEE\\u6539\\u7684\\u90E8\\u5206\\u662F\\u4F7F\\u7528\\u4FEE\\u6539\\u5E7E\\u78BC\\u7684\\u65B9\\u5F0F\\u9032\\u884C\\uFF0C\\n\\u7531\\u65BC\\u6211\\u4E0D\\u592A\\u719F\\u6089\\u8CC7\\u5B89\\uFF0C\\u4FEE\\u6539\\u5F8C\\u8981\\u5982\\u4F55\\u9A57\\u8B49\\u5462\\u9019\\u4E9B\\u5DF2\\u77E5\\u6709\\u554F\\u984C\\u7684\\u6F14\\u7B97\\u6CD5\\u662F\\u5426\\u5DF2\\u7D93\\u6B63\\u78BA\\u7684\\u88AB\\u95DC\\u9589\\u4E86\\u5462\\uFF1F\"), mdx(\"p\", null, \"\\u6240\\u4EE5\\u6211\\u53C8\\u5728\\u7DB2\\u8DEF\\u4E0Agoogle\\u627E\\u5230\\u5E7E\\u500B\\u8173\\u672C\\uFF0C\\u900F\\u904Eopenssl\\u8207curl\\u7684\\u642D\\u914D\\u53EF\\u4EE5\\u6383\\u63CF\\u6211\\u5011\\u7684server\\u652F\\u63F4\\u4E86\\u54EA\\u4E9BSSL\\u7684\\u52A0\\u5BC6\\u65B9\\u5F0F\\uFF0C\\u6709\\u5F9Eserver site\\u7684\\u6AA2\\u67E5\\u8207client site\\u7684\\u6AA2\\u67E5\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# server side\\nURL=\\\"https://yi-shiuan.github.io/\\\"\\n\\nciphers=$(openssl ciphers 'ALL:eNULL' | sed -e 's/:/ /g')\\n\\n for cipher in ${ciphers[@]}\\n do\\n echo -n Testing $cipher...\\n result=$(echo -n | openssl s_client -cipher \\\"$cipher\\\" -connect $URL 2>&1)\\n if [[ \\\"$result\\\" =~ \\\":error:\\\" ]] ; then\\n   error=$(echo -n $result | cut -d':' -f6)\\n   echo NO \\\\($error\\\\)\\n else\\n   if [[ \\\"$result\\\" =~ \\\"Cipher is ${cipher}\\\" || \\\"$result\\\" =~ \\\"Cipher    :\\\" ]] ; then\\n     echo YES\\n   else\\n     echo UNKNOWN RESPONSE\\n     echo $result\\n   fi\\n fi\\n sleep 1\\n done\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# client site\\u7684\\u6AA2\\u67E5\\nURL=\\\"https://yi-shiuan.github.io/\\\"\\n\\nDELAY=1\\nciphers=$(openssl ciphers 'ALL:eNULL' | sed -e 's/:/ /g')\\n\\nfor cipher in ${ciphers[@]}\\ndo\\n    printf -v pad %30s\\n    printf \\\"Checking ${cipher:0:30} ... \\\"\\n    curl -s -S -o /dev/null --no-progress-meter --tls-max 1.2 --ciphers $cipher $URL\\n    if [ $? -eq 0 ]; then\\n        echo OK\\n    fi\\ndone\\n\")), mdx(\"h3\", null, \"\\u53C3\\u8003\\u8CC7\\u6599\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nartac.com/Products/IISCrypto\"\n  }, \"IISCrypto\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gss.com.tw/blog/set-https-connect-protocols-and-ciphers\"\n  }, \"\\u53E1\\u63DA\\u8CC7\\u8A0A\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://curl.se/docs/ssl-ciphers.html\"\n  }, \"SSL Ciphers\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"弱點掃描-SSL加密演算法不安全的演算法","description":"最近公司資安檢查報告中被檢查出了一個關於SSL的加密連線的弱點，這個弱點是因為我們沒有把不安全的加密演算法關閉導致這個弱點的產生， 在公司的政策中線上的伺服器不能任意安裝任何程式，所以`IISCrypto`就只能放棄無法使用，所以我修改的部分是使用修改幾碼的方式進行， 由於我不太熟悉資安，修改後要如何驗證呢這些已知有問題的演算法是否已經正確的被關閉了呢？","date":"03 Jan 2022","tags":["vulnerability","ssl"]},"fields":{"path":"/2022/01/03/vulnerability-scanning-for-ssl-support-algorithm"}}},"pageContext":{}},
    "staticQueryHashes": ["2069471281","2579648174","3564308881","3595704592","3673915224"]}