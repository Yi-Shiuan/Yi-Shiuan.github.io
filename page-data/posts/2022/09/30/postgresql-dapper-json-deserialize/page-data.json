{
    "componentChunkName": "component---src-pages-posts-tsx",
    "path": "/posts/2022/09/30/postgresql-dapper-json-deserialize",
    "result": {"data":{"mdx":{"id":"6648e70c-ba41-53e2-b4fe-c6d0474e6638","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"透過Dapper存取Postgresql Json column 自動反序列化\",\n  \"description\": \"有時候一個物件我會把它序列化後使用JSON的方式存放到postgresql中，但把它取出後卻無法透過ORM直接做資料的對應，然後自己就土炮了做法， 把資料撈出後在針對欄位去反序列化，這樣做一開始覺得好像沒什麼，但這樣的資料變多了以後發現問體頗大，所以上網找了一些解決方案， 但關鍵字嚇得不好反而找到許多更奇怪的做法後來在stackoverflow上看到了這招真心覺得很棒的方法，於是筆記下來！\",\n  \"tags\": [\"database\", \".net\"],\n  \"date\": \"2022-09-30T00:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u6709\\u6642\\u5019\\u4E00\\u500B\\u7269\\u4EF6\\u6211\\u6703\\u628A\\u5B83\\u5E8F\\u5217\\u5316\\u5F8C\\u4F7F\\u7528JSON\\u7684\\u65B9\\u5F0F\\u5B58\\u653E\\u5230postgresql\\u4E2D\\uFF0C\\u4F46\\u628A\\u5B83\\u53D6\\u51FA\\u5F8C\\u537B\\u7121\\u6CD5\\u900F\\u904EORM\\u76F4\\u63A5\\u505A\\u8CC7\\u6599\\u7684\\u5C0D\\u61C9\\uFF0C\\u7136\\u5F8C\\u81EA\\u5DF1\\u5C31\\u571F\\u70AE\\u4E86\\u505A\\u6CD5\\uFF0C\\n\\u628A\\u8CC7\\u6599\\u6488\\u51FA\\u5F8C\\u5728\\u91DD\\u5C0D\\u6B04\\u4F4D\\u53BB\\u53CD\\u5E8F\\u5217\\u5316\\uFF0C\\u9019\\u6A23\\u505A\\u4E00\\u958B\\u59CB\\u89BA\\u5F97\\u597D\\u50CF\\u6C92\\u4EC0\\u9EBC\\uFF0C\\u4F46\\u9019\\u6A23\\u7684\\u8CC7\\u6599\\u8B8A\\u591A\\u4E86\\u4EE5\\u5F8C\\u767C\\u73FE\\u554F\\u9AD4\\u9817\\u5927\\uFF0C\\u6240\\u4EE5\\u4E0A\\u7DB2\\u627E\\u4E86\\u4E00\\u4E9B\\u89E3\\u6C7A\\u65B9\\u6848\\uFF0C\\n\\u4F46\\u95DC\\u9375\\u5B57\\u5687\\u5F97\\u4E0D\\u597D\\u53CD\\u800C\\u627E\\u5230\\u8A31\\u591A\\u66F4\\u5947\\u602A\\u7684\\u505A\\u6CD5\\u5F8C\\u4F86\\u5728stackoverflow\\u4E0A\\u770B\\u5230\\u4E86\\u9019\\u62DB\\u771F\\u5FC3\\u89BA\\u5F97\\u5F88\\u68D2\\u7684\\u65B9\\u6CD5\\uFF0C\\u65BC\\u662F\\u7B46\\u8A18\\u4E0B\\u4F86\\uFF01\"), mdx(\"p\", null, \"\\u7576\\u521D\\u4E5F\\u6709\\u5617\\u8A66\\u904E\\u4F7F\\u7528\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomPropertyTypeMap\"), \"\\u4F86\\u8655\\u7406\\uFF0C\\u4F46\\u9019\\u500B\\u5C0D\\u65BC\\u6B04\\u4F4D\\u8207Class\\u5C6C\\u6027\\u540D\\u7A31\\u5C0D\\u61C9\\u4E0D\\u540C\\u6642\\u4F7F\\u7528\\uFF0C\\n\\u7576\\u6B04\\u4F4D\\u8CC7\\u6599\\u9700\\u8981\\u505A\\u7279\\u6B8A\\u7684\\u8F49\\u63DB\\u6642\\u5C31\\u9700\\u8981Dapper\\u7684ITypeHandler\\u4F86\\u5B9A\\u7FA9\\u4EC0\\u9EBC\\u6A23\\u7684\\u8CC7\\u6599\\u578B\\u5225\\u9700\\u8981\\u600E\\u9EBC\\u53BB\\u505A\\u8655\\u7406\\uFF0C\\n\\u6240\\u4EE5\\u5EFA\\u7ACB\\u4E86\\u4E00\\u500Bclass\\u53BB\\u7E7C\\u627F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SqlMapper.ITypeHandler\"), \"\\u7136\\u5F8C\\u5BE6\\u4F5C\\u985E\\u4F3CGet/Set\\u7684\\u7269\\u4EF6\\u5B58\\u53D6\\u7684\\u65B9\\u5F0F\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"public class JsonTypeHandler : SqlMapper.ITypeHandler\\n{\\n    public void SetValue(IDbDataParameter parameter, object value)\\n    {\\n        parameter.Value = JsonSerializer.Serialize(value);\\n    }\\n\\n    public object Parse(Type destinationType, object value)\\n    {\\n        return value == null ? destinationType : JsonSerializer.Deserialize(value.ToString()!, destinationType);\\n    }\\n}\\n\")), mdx(\"p\", null, \"\\u505A\\u597D\\u4E86\\u9019\\u6A23\\u7684\\u7269\\u4EF6\\u5F8C\\uFF0C\\u53EA\\u8981\\u5728\\u8CC7\\u6599\\u5EAB\\u7684\\u9023\\u7DDA\\u7269\\u4EF6\\u4E0A\\u8A3B\\u518A\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u7576\\u9047\\u5230xxxx\"), \"\\u578B\\u5225\\u6642\\uFF0C\\u4F7F\\u7528JsonTypeHandler\\u505A\\u8655\\u7406\\uFF0C\\u9019\\u6A23\\u4E00\\u4F86\\u5C31\\u5FC5\\u9808\\u8981\\u571F\\u70AE\\u628A\\u8CC7\\u6599\\u6488\\u51FA\\u4F86\\u5F8C\\n\\u4F7F\\u7528callback\\u7684\\u65B9\\u5F0F\\u505A\\u53CD\\u5E8F\\u5217\\u5316\\u5728\\u50F5\\u503C\\u653E\\u56DE\\u539F\\u672C\\u9700\\u8981\\u7684\\u7269\\u4EF6\\u4E2D\\uFF0C\\u6E1B\\u5C11\\u4E86\\u8A31\\u591A\\u8907\\u96DC\\u7684\\u72C0\\u614B\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"public class DbContext\\n{\\n    private string connectionString;\\n    private readonly ILogger<DbContext> logger;\\n\\n    public DbContext(IServiceProvider provider)\\n    {\\n        \\u7565...\\n\\n        // \\u5148\\u6C7A\\u5B9A\\u76EE\\u6A19\\u7684\\u578B\\u5225\\uFF0C\\u518D\\u4F86\\u628A\\u76F8\\u5C0D\\u61C9\\u7684\\u8655\\u7406\\u65B9\\u5F0F\\u586B\\u4E0A\\u5C31\\u884C\\u4E86\\n        SqlMapper.AddTypeHandler(typeof(Dictionary<string, string>), new JsonTypeHandler());\\n    }\\n\\n    /// \\u7565...\\n}\\n\")), mdx(\"h2\", null, \"\\u53C3\\u8003\\u8CC7\\u6599\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/49888334/can-dapper-deserialize-json-stored-as-text\"\n  }, \"can-dapper-deserialize-json-stored-as-text\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"透過Dapper存取Postgresql Json column 自動反序列化","description":"有時候一個物件我會把它序列化後使用JSON的方式存放到postgresql中，但把它取出後卻無法透過ORM直接做資料的對應，然後自己就土炮了做法， 把資料撈出後在針對欄位去反序列化，這樣做一開始覺得好像沒什麼，但這樣的資料變多了以後發現問體頗大，所以上網找了一些解決方案， 但關鍵字嚇得不好反而找到許多更奇怪的做法後來在stackoverflow上看到了這招真心覺得很棒的方法，於是筆記下來！","date":"30 Sep 2022","tags":["database",".net"]},"fields":{"path":"/2022/09/30/postgresql-dapper-json-deserialize"}}},"pageContext":{"id":"6648e70c-ba41-53e2-b4fe-c6d0474e6638"}},
    "staticQueryHashes": ["2069471281","2579648174","3564308881","3595704592","3673915224"]}