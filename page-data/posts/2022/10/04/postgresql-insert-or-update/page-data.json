{
    "componentChunkName": "component---src-pages-posts-tsx",
    "path": "/posts/2022/10/04/postgresql-insert-or-update",
    "result": {"data":{"mdx":{"id":"6f4a3162-6752-58a7-989f-400c04275620","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Postgresql 的Merge語法\",\n  \"description\": \"在SQL Server中有一個語法是merge的語法，他可以根據特定的條件執行特定的操作，如資料存在就更新不存在就新增。 但在Postgresql中，似乎沒有merge的語法可以使用...但在程式理先去得資料在判斷是否更新或新增這樣的情境容易導致一些後遺症.... 在google後，其實有很多方式但...嘗試後只有這個方法是可行的，所以在這邊筆記一下\",\n  \"date\": \"2022-10-04T00:00:00.000Z\",\n  \"tags\": [\"postgresql\", \"database\"],\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u5728SQL Server\\u4E2D\\u6709\\u4E00\\u500B\\u8A9E\\u6CD5\\u662F\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"merge\"), \"\\u7684\\u8A9E\\u6CD5\\uFF0C\\u4ED6\\u53EF\\u4EE5\\u6839\\u64DA\\u7279\\u5B9A\\u7684\\u689D\\u4EF6\\u57F7\\u884C\\u7279\\u5B9A\\u7684\\u64CD\\u4F5C\\uFF0C\\u5982\\u8CC7\\u6599\\u5B58\\u5728\\u5C31\\u66F4\\u65B0\\u4E0D\\u5B58\\u5728\\u5C31\\u65B0\\u589E\\u3002\\n\\u4F46\\u5728Postgresql\\u4E2D\\uFF0C\\u4F3C\\u4E4E\\u6C92\\u6709merge\\u7684\\u8A9E\\u6CD5\\u53EF\\u4EE5\\u4F7F\\u7528...\\u4F46\\u5728\\u7A0B\\u5F0F\\u7406\\u5148\\u53BB\\u5F97\\u8CC7\\u6599\\u5728\\u5224\\u65B7\\u662F\\u5426\\u66F4\\u65B0\\u6216\\u65B0\\u589E\\u9019\\u6A23\\u7684\\u60C5\\u5883\\u5BB9\\u6613\\u5C0E\\u81F4\\u4E00\\u4E9B\\u5F8C\\u907A\\u75C7....\\n\\u5728google\\u5F8C\\uFF0C\\u5176\\u5BE6\\u6709\\u5F88\\u591A\\u65B9\\u5F0F\\u4F46...\\u5617\\u8A66\\u5F8C\\u53EA\\u6709\\u9019\\u500B\\u65B9\\u6CD5\\u662F\\u53EF\\u884C\\u7684\\uFF0C\\u6240\\u4EE5\\u5728\\u9019\\u908A\\u7B46\\u8A18\\u4E00\\u4E0B\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"postgresql\\u7684\\u7248\\u672C\\u662F13\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plsql\"\n  }, \"INSERT INTO public.table (user_id, name, email)\\nVALUES (@userid, @username, @user_email)\\nON CONFLICT (user_id)\\n    DO UPDATE SET (name, email) = (@username, @user_email)\\nWHERE members.user_id = @userid;\\n\")), mdx(\"p\", null, \"\\u7576table\\u4E2Duser_id\\u885D\\u7A81\\u6642\\uFF0C\\u5C31\\u6703\\u81EA\\u52D5\\u57F7\\u884Cupdate\\uFF0C\\u9019\\u6A23\\u4E00\\u4F86\\u6839SQL server\\u4E2D\\u7684merge\\u8A9E\\u53E5\\u5C31\\u76F8\\u540C\\u4E86\\uFF01\"), mdx(\"h3\", null, \"\\u53C3\\u8003\\u8CC7\\u6599\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.postgresql.org/docs/current/sql-insert.html\"\n  }, \"postgresql insert\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Postgresql 的Merge語法","description":"在SQL Server中有一個語法是merge的語法，他可以根據特定的條件執行特定的操作，如資料存在就更新不存在就新增。 但在Postgresql中，似乎沒有merge的語法可以使用...但在程式理先去得資料在判斷是否更新或新增這樣的情境容易導致一些後遺症.... 在google後，其實有很多方式但...嘗試後只有這個方法是可行的，所以在這邊筆記一下","date":"04 Oct 2022","tags":["postgresql","database"]},"fields":{"path":"/2022/10/04/postgresql-insert-or-update"}}},"pageContext":{"id":"6f4a3162-6752-58a7-989f-400c04275620"}},
    "staticQueryHashes": ["2069471281","2579648174","3564308881","3595704592","3673915224"]}