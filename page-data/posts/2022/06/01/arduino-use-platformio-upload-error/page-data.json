{
    "componentChunkName": "component---src-pages-posts-tsx",
    "path": "/posts/2022/06/01/arduino-use-platformio-upload-error",
    "result": {"data":{"mdx":{"id":"2b1d4c9d-3948-578c-be1a-21a757755bfb","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"使用platformio上傳arduino時出現錯誤代碼(0107)\",\n  \"description\": \"第一次接觸arduino，很開心地寫下了一個閃爍板子上的LED程式碼後要上傳到板子，結果上傳時發生了錯誤 出現了Failed to write to target RAM (result was 0107)這樣的錯誤代碼，試了網路上很多的方式都沒有成功，最後發現了原來serial port 不正確...\",\n  \"date\": \"2022-06-01T00:00:00.000Z\",\n  \"tags\": [\"iot\", \"platformio\", \"arduino\"],\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u7B2C\\u4E00\\u6B21\\u63A5\\u89F8arduino\\uFF0C\\u5F88\\u958B\\u5FC3\\u5730\\u5BEB\\u4E0B\\u4E86\\u4E00\\u500B\\u9583\\u720D\\u677F\\u5B50\\u4E0A\\u7684LED\\u7A0B\\u5F0F\\u78BC\\u5F8C\\u8981\\u4E0A\\u50B3\\u5230\\u677F\\u5B50\\uFF0C\\u7D50\\u679C\\u4E0A\\u50B3\\u6642\\u767C\\u751F\\u4E86\\u932F\\u8AA4\\n\\u51FA\\u73FE\\u4E86Failed to write to target RAM (result was 0107)\\u9019\\u6A23\\u7684\\u932F\\u8AA4\\u4EE3\\u78BC\\uFF0C\\u8A66\\u4E86\\u7DB2\\u8DEF\\u4E0A\\u5F88\\u591A\\u7684\\u65B9\\u5F0F\\u90FD\\u6C92\\u6709\\u6210\\u529F\\uFF0C\\u6700\\u5F8C\\u767C\\u73FE\\u4E86\\u539F\\u4F86serial port\\n\\u4E0D\\u6B63\\u78BA...\"), mdx(\"p\", null, \"\\u4EE5\\u4E0B\\u662F\\u4E0A\\u50B3\\u6642\\u767C\\u751F\\u7684\\u932F\\u8AA4\\u8A0A\\u606F\\u8CC7\\u6599\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"/usr/local/bin/platformio -c clion run --target upload -e nodemcuv2\\nProcessing nodemcuv2 (platform: espressif8266; board: nodemcuv2; framework: arduino)\\n\\nVerbose mode can be enabled via `-v, --verbose` option\\nCONFIGURATION: https://docs.platformio.org/page/boards/espressif8266/nodemcuv2.html\\nPLATFORM: Espressif 8266 (3.2.0) > NodeMCU 1.0 (ESP-12E Module)\\nHARDWARE: ESP8266 80MHz, 80KB RAM, 4MB Flash\\nPACKAGES:\\n - framework-arduinoespressif8266 @ 3.30002.0 (3.0.2)\\n - tool-esptool @ 1.413.0 (4.13)\\n - tool-esptoolpy @ 1.30000.201119 (3.0.0)\\n - tool-mklittlefs @ 1.203.210628 (2.3)\\n - tool-mkspiffs @ 1.200.0 (2.0)\\n - toolchain-xtensa @ 2.100300.210717 (10.3.0)\\nLDF: Library Dependency Finder -> https://bit.ly/configure-pio-ldf\\nLDF Modes: Finder ~ chain, Compatibility ~ soft\\nFound 35 compatible libraries\\nScanning dependencies...\\nNo dependencies\\nBuilding in release mode\\nRetrieving maximum program size .pio/build/nodemcuv2/firmware.elf\\nChecking size .pio/build/nodemcuv2/firmware.elf\\nAdvanced Memory Usage is available via \\\"PlatformIO Home > Project Inspect\\\"\\nRAM:   [===       ]  34.2% (used 28032 bytes from 81920 bytes)\\nFlash: [===       ]  25.4% (used 265729 bytes from 1044464 bytes)\\nConfiguring upload protocol...\\nAVAILABLE: espota, esptool\\nCURRENT: upload_protocol = esptool\\nLooking for upload port...\\nAuto-detected: /dev/cu.usbmodem53770161961\\nUploading .pio/build/nodemcuv2/firmware.bin\\nesptool.py v3.0\\nSerial port /dev/cu.usbmodem53770161961\\nConnecting....\\nChip is ESP8266EX\\nFeatures: WiFi\\nCrystal is 26MHz\\nMAC: e8:db:84:df:34:f7\\nUploading stub...\\n\\nA fatal error occurred: Failed to write to target RAM (result was 0107)\\n*** [upload] Error 2\\n [FAILED] Took 2.01 seconds\\n\\nProcess finished with exit code 1\\n\")), mdx(\"h3\", null, \"\\u78BA\\u8A8D\\u7DDA\\u6750\"), mdx(\"p\", null, \"\\u56E0\\u70BA\\u677F\\u5B50\\u4E0A\\u7684usb\\u4ECB\\u9762\\u4E8Bmirco usb\\u7684\\u4ECB\\u9762\\uFF0C\\u9019\\u500B\\u4ECB\\u9762\\u5F88\\u591A\\u7684\\u7DDA\\u6750\\u662F\\u53EA\\u6709\\u5145\\u96FB\\u529F\\u80FD\\u800C\\u5DF2\\u7121\\u6CD5\\u505A\\u8CC7\\u6599\\u50B3\\u8F38\\uFF0C\\u6240\\u4EE5...\\u9996\\u5148\\u8981\\u5148\\u78BA\\u5B9A\\u4F60\\u7684\\u7DDA\\u6750\\u662F\\u4E0D\\u662F\\u53EF\\u4EE5\\u505A\\u8CC7\\u6599\\u50B3\\u8F38\\u7684\\u7528\\u9014\\uFF0C\\n\\u5426\\u5247\\u505A\\u4E86\\u518D\\u591A\\u7684\\u5DE5\\u4F5C\\u53EF\\u80FD\\u90FD\\u7121\\u6CD5\\u4E0A\\u50B3\\u6210\\u529F\"), mdx(\"p\", null, \"\\u56E0\\u6B64\\u6211\\u9084\\u4E0A\\u4E86pchome\\u8CFC\\u8CB7\\u4E86usb type-c to mirco usb\\u7684\\u8CC7\\u6599\\u50B3\\u8F38\\u7DDA...\"), mdx(\"h3\", null, \"\\u9A45\\u52D5\\u7A0B\\u5F0F\"), mdx(\"p\", null, \"\\u6211\\u4F7F\\u7528\\u7684\\u677F\\u5B50\\u662FnodeMCU ESP-12E(ESP-8266\\u7684\\u677F\\u5B50\\uFF0C\\u6676\\u7247\\u662FCH9102X)\\uFF0C\\u642D\\u914D\\u7684\\u4E8BCLion\\u7684IDE\\u958B\\u767C\\u5DE5\\u5177\"), mdx(\"p\", null, \"\\u5728\\u7DB2\\u8DEF\\u4E0A\\u627E\\u5230\\u7684\\u554F\\u984C\\u4E3B\\u8981\\u90FD\\u662F\\u7B2C\\u4E00\\u6B21\\u4E0A\\u50B3\\u5230\\u677F\\u5B50\\u6C92\\u6709\\u5B89\\u88DD\\u76F8\\u5C0D\\u61C9\\u7684\\u9A45\\u52D5\\u7A0B\\u5F0F\\u6240\\u4EE5\\u5C0E\\u81F4\\u932F\\u8AA4\\u767C\\u751F\\uFF0C\\u5982\\u679C\\u767C\\u751F\\u9019\\u500B\\u72C0\\u614B\\u597D\\u89E3\\u6C7A\\uFF0C\\u5B89\\u88DD\\u76F8\\u5C0D\\u61C9\\u7684\\u9A45\\u52D5\\u7A0B\\u5F0F\\u5C31\\u53EF\\u4EE5\\u89E3\\u6C7A\\u4E86\\nESP8266\\u7684\\u6676\\u7247\\u6709\\u5169\\u7A2E\\u4E00\\u7A2E\\u662FCH9102\\u53E6\\u4E00\\u7A2E\\u662FCP2102\\uFF0C\\u7DB2\\u8DEF\\u4E0A\\u641C\\u5C0B\\u7684\\u6642\\u5019\\u9084\\u6703\\u51FA\\u73FECH340\\u76F8\\u95DC\\u7684\\u8CC7\\u6599\\uFF0CCH340\\u8DDFCH9102\\u662F\\u76F8\\u540C\\u7684\\u6240\\u4EE5\\u5B89\\u88DD\\u7684\\u6642\\u5019\\u53EF\\u4EE5\\u627E\\u5230CH34x\\u7684\\u9A45\\u52D5\\u5B89\\u88DD\\u5F8C\\u5373\\u53EF\\n\\u4F46...\\u5982\\u679C\\u9084\\u662F\\u4E0D\\u884C\\uFF0C\\u53EF\\u4EE5\\u5148\\u78BA\\u5B9A\\u4E00\\u4E0B\\u96FB\\u8166\\u662F\\u5426\\u6709\\u6293\\u5230\\u677F\\u5B50\\u5728\\u505A\\u4E0B\\u4E00\\u6B65\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"pio device list\\n\")), mdx(\"p\", null, \"\\u4EE5\\u4E0B\\u662F\\u6211\\u7684output\\u8CC7\\u8A0A\\uFF0C\\u6709\\u770B\\u5230\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/dev/cu.xxxxxx\"), \"\\u7684\\u8CC7\\u6599\\uFF0C\\u5C31\\u8868\\u793A\\u771F\\u7684\\u6709\\u6293\\u5230\\u677F\\u5B50\\u56C9\\uFF01\\u4F46\\u5982\\u679C\\u770B\\u5230\\u4E86\\u9019\\u6A23\\u7684\\u8F38\\u51FA\\uFF0C\\u9084\\u662F\\u51FA\\u73FE\\u4E86\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A fatal error occurred: Failed to write to target RAM (result was 0107)\"), \"\\u7684\\u932F\\u8AA4\\uFF0C\\u8A72\\u600E\\u9EBC\\u8FA6\\uFF1F\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"/dev/cu.BLTH\\n------------\\nHardware ID: n/a\\nDescription: n/a\\n\\n/dev/cu.Bluetooth-Incoming-Port\\n-------------------------------\\nHardware ID: n/a\\nDescription: n/a\\n\\n/dev/cu.wchusbserial53770161961\\n-------------------------------\\nHardware ID: USB VID:PID=1A86:55D4 SER=5377016196 LOCATION=20-2\\nDescription: USB Single Serial\\n\\n/dev/cu.usbmodem53770161961\\n---------------------------\\nHardware ID: USB VID:PID=1A86:55D4 SER=5377016196 LOCATION=20-2\\nDescription: USB Single Serial\\n\")), mdx(\"h3\", null, \"\\u78BA\\u8A8Dupload port\\u7684\\u8A2D\\u5B9A\"), mdx(\"p\", null, \"\\u5B89\\u88DD\\u9A45\\u52D5\\u8DDF\\u78BA\\u8A8D\\u7DDA\\u6750\\u7684\\u554F\\u984C\\u6211\\u5361\\u4E86\\u8A31\\u4E45\\uFF0C\\u4E5F\\u78BA\\u8A8D\\u4E86\\u8A31\\u591A\\u6B21\\u6578\\u5F8C\\u6211\\u767C\\u73FE\\u6211\\u7684\\u8F38\\u51FA\\u932F\\u8AA4\\u90FD\\u662F\\u5728\\u4F7F\\u7528\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/dev/cu.usbmodem53770161961\"), \"\\u9019\\u500Bserial port\\u4E0A\\u50B3\\uFF0C\\n\\u7136\\u5F8C\\u5076\\u723E\\u6703\\u51FA\\u73FE\\u8CC7\\u9662\\u5FD9\\u788C\\u4E2D\\u7684\\u932F\\u8AA4\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"could not open port '/dev/cu.usbmodem53770161961': [Errno 16] could not open port /dev/cu.usbmodem53770161961: [Errno 16] Resource busy:.....\\n\")), mdx(\"p\", null, \"\\u5728\\u67E5\\u8A62\\u8CC7\\u6599\\u904E\\u7A0B\\u4E2D\\u60F3\\u8D77\\u4E86\\u4E00\\u500B\\u8A2D\\u5B9A\\uFF0C\\u90A3\\u5C31\\u662F\\u6307\\u5B9A\\u4E0A\\u50B3\\u7684serial port\\u60F3\\u8AAA\\u96A8\\u4FBF\\u8A66\\u8A66\\u770B\\u662F\\u4E0D\\u662F\\u56E0\\u70BAserial port\\u7684\\u554F\\u984C...\\u7562\\u7ADF\\u6BCF\\u6B21\\u90FD\\u5361\\u5728\\u540C\\u4E00\\u500Bport\\u4E0A\\u4E7E\\u8106\\u63DB\\u4E00\\u500B\\u8A66\\u8A66\\u770B\\n\\u6240\\u4EE5\\u6211\\u5728platfromio.ini\\u9019\\u500B\\u6A94\\u6848\\u4E0A\\u589E\\u52A0\\u4E86\\u4E00\\u884Cupload_port\\u7684\\u8A2D\\u5B9A\\uFF0C\\u6C92\\u60F3\\u5230\\u5C31\\u51FA\\u73FE\\u6210\\u529F\\u7684\\u8CC7\\u8A0A\\u4E86\\uFF01\\u5982\\u679C\\u4F60\\u5728pio device list\\u770B\\u5230\\u5169\\u500Bport\\u9019\\u500B\\u65B9\\u6CD5\\u53EF\\u4EE5\\u8A66\\u8A66\\u770B\\uFF0C\\u6216\\u8A31\\u6709\\u7528\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"[env:nodemcuv2]\\nplatform = espressif8266\\nboard = nodemcuv2\\nframework = arduino\\nupload_port = /dev/cu.wchusbserial53770161961\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"使用platformio上傳arduino時出現錯誤代碼(0107)","description":"第一次接觸arduino，很開心地寫下了一個閃爍板子上的LED程式碼後要上傳到板子，結果上傳時發生了錯誤 出現了Failed to write to target RAM (result was 0107)這樣的錯誤代碼，試了網路上很多的方式都沒有成功，最後發現了原來serial port 不正確...","date":"01 Jun 2022","tags":["iot","platformio","arduino"]},"fields":{"path":"/2022/06/01/arduino-use-platformio-upload-error"}}},"pageContext":{"id":"2b1d4c9d-3948-578c-be1a-21a757755bfb"}},
    "staticQueryHashes": ["2069471281","2579648174","3564308881","3595704592","3673915224"]}