{
    "componentChunkName": "component---src-pages-posts-tsx",
    "path": "/posts/2022/04/20/azure-self-install",
    "result": {"data":{"mdx":{"id":"ce8caad0-57a1-53e0-9024-c7d72be71706","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Azure 的自動裝機\",\n  \"description\": \"在之前已經有寫過AWS的裝機處理，這次改用Azure同樣的可以讓系統從scale out到上線不需要人工的處理就可以完成系統的部署與設定\",\n  \"date\": \"2022-04-20T00:00:00.000Z\",\n  \"tags\": [\"devops\", \"azure\", \"prevision\"],\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u5728\\u4E4B\\u524D\\u5DF2\\u7D93\\u6709\\u5BEB\\u904EAWS\\u7684\\u88DD\\u6A5F\\u8655\\u7406\\uFF0C\\u9019\\u6B21\\u6539\\u7528Azure\\u540C\\u6A23\\u7684\\u53EF\\u4EE5\\u8B93\\u7CFB\\u7D71\\u5F9Escale out\\u5230\\u4E0A\\u7DDA\\u4E0D\\u9700\\u8981\\u4EBA\\u5DE5\\u7684\\u8655\\u7406\\u5C31\\u53EF\\u4EE5\\u5B8C\\u6210\\u7CFB\\u7D71\\u7684\\u90E8\\u7F72\\u8207\\u8A2D\\u5B9A\"), mdx(\"h2\", null, \"Azure \\u7684VM Scale Set\"), mdx(\"p\", null, \"\\u5728AWS\\u662F\\u7A31\\u70BAAuto Scaling Group\\uFF0C\\u5728Azure\\u4E2D\\u7684\\u540D\\u7A31\\u662FVirtual Machine Scale Set(\\u4EE5\\u4E0B\\u7C21\\u7A31VMSS)\\uFF0C\\u9019\\u4E5F\\u662F\\u4E00\\u500B\\u7FA4\\u7D44\\u8A2D\\u5B9A\\u865B\\u64EC\\u6A5F\\u5668\\u7684\\u898F\\u683C, \\u4F38\\u7E2E\\u7684\\u689D\\u4EF6, \\u5065\\u5EB7\\u6AA2\\u67E5\\u7B49\\u7B49\\u7684\\u8A2D\\u5B9A\"), mdx(\"p\", null, \"custom_data\\u7684\\u8CC7\\u6599\\u5C31\\u662F\\u6211\\u5011\\u6E96\\u5099\\u8981\\u8A2D\\u5B9A\\u958B\\u6A5F\\u5F8C\\u8981\\u57F7\\u884C\\u7684\\u8173\\u672C\\uFF0C\\u9019\\u500B\\u8A2D\\u5B9A\\u4E86\\u4EE5\\u5F8C\\u5728azure \\u7684Portal\\u662F\\u7121\\u6CD5\\u518D\\u770B\\u5230\\u7684\\uFF0C\\u6240\\u4EE5\\u5982\\u679C\\u4E0D\\u662F\\u4F7F\\u7528IaC\\u7684\\u8A71\\u4E00\\u5B9A\\u8981\\u627E\\u500B\\u5730\\u65B9\\u505A\\u7D00\\u9304\\nAzure\\u7684VMSS\\u5C31\\u6709\\u5167\\u5EFA\\u7684\\u6AA2\\u67E5\\u6A5F\\u5236(extension\\u5340\\u584A)\\uFF0C\\u53EF\\u4EE5\\u6AA2\\u67E5VM\\u7684\\u670D\\u52D9\\u662F\\u5426\\u6B63\\u78BA\\u5730\\u88AB\\u555F\\u52D5\\uFF0C\\u82E5\\u6C92\\u6709\\u5728\\u6642\\u9593\\u5167\\u88AB\\u6E2C\\u8A66\\u6210\\u529F\\u7684\\u8A71\\u6A5F\\u5668\\u6703\\u91CD\\u65B0\\u6536\\u56DE\\u90E8\\u7F72\"), mdx(\"p\", null, \"\\u5728terraform \\u6709\\u53E6\\u4E00\\u500B\\u8A2D\\u5B9A extension\\u7684module\\uFF0C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"azurerm_virtual_machine_extension\"), \"\\u8A2D\\u5B9A\\u5982\\u679C\\u8981\\u8A2D\\u5B9A\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"healthRepairExtension\"), \"\\u5728\\u6211\\u6E2C\\u8A66\\u6642\\u662F\\u6703\\u5931\\u6557\\u7684\\uFF0C\\u6240\\u4EE5\\u4E00\\u5B9A\\u8981\\u5728extension\\u5340\\u584A\\u4E2D\\u8A2D\\u5B9A\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-config\"\n  }, \"resource \\\"azurerm_linux_virtual_machine_scale_set\\\" \\\"sample\\\" {\\n  name                = \\\"${var.prefix}-vmss\\\"\\n  resource_group_name = data.azurerm_resource_group.main.name\\n  location            = data.azurerm_resource_group.main.location\\n  zone_balance        = true\\n  zones               = [1, 2, 3]\\n  sku                 = var.machineSize\\n  instances           = var.capacity.minimum\\n  admin_username      = \\\"azureuser\\\"\\n  custom_data         = filebase64(\\\"${path.module}/custom-data.sh\\\")\\n\\n  admin_ssh_key {\\n    username   = \\\"azureuser\\\"\\n    public_key = data.azurerm_ssh_public_key.logstash.public_key\\n  }\\n\\n  automatic_instance_repair {\\n    enabled      = true\\n    grace_period = \\\"PT10M\\\"\\n  }\\n\\n  source_image_reference {\\n    publisher = \\\"canonical\\\"\\n    offer     = \\\"0001-com-ubuntu-server-focal\\\"\\n    sku       = \\\"20_04-lts-gen2\\\"\\n    version   = \\\"latest\\\"\\n  }\\n\\n  os_disk {\\n    storage_account_type = \\\"Standard_LRS\\\"\\n    caching              = \\\"ReadWrite\\\"\\n    disk_size_gb         = 30\\n  }\\n\\n  extension {\\n    name                      = \\\"healthRepairExtension\\\"\\n    publisher                 = \\\"Microsoft.ManagedServices\\\"\\n    type                      = \\\"ApplicationHealthLinux\\\"\\n    type_handler_version      = \\\"1.0\\\"\\n    automatic_upgrade_enabled = true\\n    settings                  = <<settings\\n      {\\n        \\\"protocol\\\" : \\\"http\\\",\\n        \\\"port\\\" : 80,\\n        \\\"requestPath\\\" : \\\"/\\\"\\n      }\\n    settings\\n  }\\n\\n  network_interface {\\n    name    = \\\"${var.prefix}-NIC\\\"\\n    primary = true\\n\\n    ip_configuration {\\n      name      = \\\"internal\\\"\\n      primary   = true\\n      subnet_id = azurerm_subnet.subnet.id\\n    }\\n  }\\n\\n  tags = {\\n    env      = var.environment\\n    service  = \\\"logstash\\\"\\n    createby = \\\"brunojan\\\"\\n    docker   = \\\"yes\\\"\\n    date     = formatdate(\\\"YYYY/MM/DD hh:mm:ss\\\", timestamp())\\n    version  = var.ap_version\\n  }\\n}\\n\")), mdx(\"h2\", null, \"VMSS\\u7684\\u64F4\\u5C55\\u8A08\\u756B\"), mdx(\"p\", null, \"\\u5728Azure\\u7684\\u8A2D\\u5B9A\\u5462\\uFF0C\\u8AAA\\u771F\\u7684\\u6211\\u9084\\u6C92\\u6709\\u975E\\u5E38\\u7684\\u7406\\u89E3\\u6574\\u500B\\u8A2D\\u5B9A\\uFF0C\\u4F46\\u76EE\\u524D\\u770B\\u8D77\\u4F86\\u7684\\u8A2D\\u5B9A\\u8F03\\u70BA\\u9EBB\\u7169...\"), mdx(\"p\", null, \"\\u5728Profile\\u4E2D\\uFF0C\\u4E00\\u5B9A\\u8981\\u6709\\u4E00\\u7D44\\u9810\\u8A2D\\u7684\\u8A2D\\u5B9A\\u8CC7\\u6599\\uFF0C\\u63A5\\u4E0B\\u4F86\\u624D\\u80FD\\u5728\\u8A2D\\u5B9A\\u5176\\u4ED6\\u7684\\u64F4\\u5C55\\u7B56\\u7565\\uFF0C\\u6240\\u4EE5\\u6211\\u76F4\\u63A5hard code\\u4E00\\u7D44default\\u7684\\u8A2D\\u5B9A\\uFF0C\\u9019\\u500B\\u8A2D\\u5B9A\\u6703\\u662F\\u4E3B\\u8981\\u7684\\u64F4\\u5C55\\u7B56\\u7565\\u3002\\n\\u5176\\u4ED6\\u7684\\u8A2D\\u5B9A\\u57FA\\u672C\\u4E0A\\u53EF\\u4EE5\\u4F9D\\u7167\\u7279\\u5B9A\\u7684\\u6642\\u9593\\uFF0C\\u6216\\u662F\\u60C5\\u5883\\u4F86\\u505A\\u8A2D\\u5B9A\"), mdx(\"p\", null, \"\\u5728\\u8A2D\\u5B9A\\u4E2D\\u7684\\u6642\\u9593\\u8A2D\\u5B9A\\u5728Azure\\u90FD\\u662F\\u4F7F\\u7528ISO-8601\\u7684\\u8A2D\\u5B9A\\u6A19\\u6E96\\u4F86\\u8A2D\\u5B9A\\uFF0C\\u9019\\u500B\\u90E8\\u4EFD\\u5C0D\\u65BC\\u6211\\u4F86\\u8AAA\\u771F\\u7684\\u5F88\\u4E0D\\u9806\\u624B\\uFF0C\\u4E5F\\u4E0D\\u5BB9\\u6613\\u7406\\u89E3...\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-config\"\n  }, \"resource \\\"azurerm_monitor_autoscale_setting\\\" \\\"autoscale\\\" {\\n  name                = \\\"${var.prefix}-scale-set\\\"\\n  resource_group_name = data.azurerm_resource_group.main.name\\n  location            = data.azurerm_resource_group.main.location\\n  target_resource_id  = azurerm_linux_virtual_machine_scale_set.sample.id\\n\\n  profile {\\n    name = \\\"default\\\"\\n\\n    capacity {\\n      default = var.capacity.minimum\\n      minimum = var.capacity.minimum\\n      maximum = var.capacity.maximum\\n    }\\n\\n    dynamic \\\"rule\\\" {\\n      for_each = length(var.policies) > 0 ? var.policies : []\\n      content {\\n        metric_trigger {\\n          metric_name        = rule.value.metric\\n          metric_resource_id = azurerm_linux_virtual_machine_scale_set.sample.id\\n          time_grain         = rule.value.grain\\n          statistic          = rule.value.statistic\\n          time_window        = rule.value.duration\\n          time_aggregation   = rule.value.statistic\\n          operator           = rule.value.operation\\n          threshold          = rule.value.threshold\\n          metric_namespace   = \\\"microsoft.compute/virtualmachinescalesets\\\"\\n        }\\n\\n        scale_action {\\n          direction = rule.value.action\\n          type      = \\\"ChangeCount\\\"\\n          value     = rule.value.count\\n          cooldown  = rule.value.cooldown\\n        }\\n      }\\n    }\\n  }\\n\\n  dynamic \\\"profile\\\" {\\n    for_each = length(var.schedules) > 0 ? var.schedules : []\\n\\n    content {\\n      name = profile.value.name\\n\\n      capacity {\\n        default = profile.value.minimum\\n        minimum = profile.value.minimum\\n        maximum = profile.value.maximum\\n      }\\n\\n      recurrence {\\n        timezone = \\\"Taipei Standard Time\\\"\\n        days     = profile.value.days\\n        hours    = profile.value.hours\\n        minutes  = profile.value.minutes\\n      }\\n\\n    }\\n  }\\n\")), mdx(\"h2\", null, \"Terraform azurerm_virtual_machine_scale_set\"), mdx(\"p\", null, \"\\u9019\\u500B\\u5728\\u672A\\u4F86\\u7684\\u7248\\u672C\\u4E2D\\u5DF2\\u7D93\\u88AB\\u68C4\\u7528\\u4E86\\uFF0C\\u6240\\u4EE5\\u5982\\u679C\\u6709\\u8981\\u4F7F\\u7528terraform\\u7684\\u8A18\\u5F97\\u6539\\u7528\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"azurerm_linux_virtual_machine_scale_set\"), \"(Linux)\\u8207azurerm_windows_virtual_machine_scale_set(Windows)\\n\\u8A2D\\u5B9A\\u4E0A\\u57FA\\u672C\\u5DEE\\u4E0D\\u591A\"), mdx(\"h2\", null, \"\\u53C3\\u8003\\u8CC7\\u6599\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/ISO_8601\"\n  }, \"ISO-8601 wiki\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine_scale_set\"\n  }, \"Terraform azurerm_virtual_machine_scale_set\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Azure 的自動裝機","description":"在之前已經有寫過AWS的裝機處理，這次改用Azure同樣的可以讓系統從scale out到上線不需要人工的處理就可以完成系統的部署與設定","date":"20 Apr 2022","tags":["devops","azure","prevision"]},"fields":{"path":"/2022/04/20/azure-self-install"}}},"pageContext":{"id":"ce8caad0-57a1-53e0-9024-c7d72be71706"}},
    "staticQueryHashes": ["2069471281","2579648174","3564308881","3595704592","3673915224"]}