{"version":3,"sources":["webpack:///./src/posts/redis-data-types/index.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"kOAKaA,EAAe,CAC1B,MAAS,sBACT,YAAe,qHACf,KAAQ,CAAC,SACT,KAAQ,2BACR,WAAa,GAQTC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,6CACA,8BACA,+EACA,8IAEA,qCACA,4GACA,gCAEE,kBAAO,CACL,WAAc,cADhB,uMAMA,kBAAO,CACL,WAAc,cACb,kBAAO,CACN,KAAQ,qCACR,WAAc,KAFf,gBAML,4CACA,wBAEE,mBAAQ,CACN,WAAc,MADhB,mBAKA,mBAAQ,CACN,WAAc,MADhB,iBAKA,mBAAQ,CACN,WAAc,MADhB,gBAKF,gCAEE,kBAAO,CACL,WAAc,cADhB,uGAMF,mCACA,yKAEE,+BAFF,cAIA,gCAEE,kBAAO,CACL,WAAc,cADhB,uMAMA,kBAAO,CACL,WAAc,cACb,kBAAO,CACN,KAAQ,qCACR,WAAc,KAFf,gBAML,uCACA,wBAEE,mBAAQ,CACN,WAAc,MADhB,iBAKA,mBAAQ,CACN,WAAc,MADhB,8BAKF,gCACA,+FACE,+BADF,QAGA,gCAEE,kBAAO,CACL,WAAc,cADhB,iNAMA,kBAAO,CACL,WAAc,cACb,kBAAO,CACN,KAAQ,qCACR,WAAc,KAFf,gBAML,qCACA,wBAEE,mBAAQ,CACN,WAAc,MADhB,WAKA,mBAAQ,CACN,WAAc,MADhB,QAKA,mBAAQ,CACN,WAAc,MADhB,YAKA,mBAAQ,CACN,WAAc,MADhB,YAKA,mBAAQ,CACN,WAAc,MADhB,aAKF,+BACA,qFACE,+BADF,QAGA,oCACA,wBAEE,mBAAQ,CACN,WAAc,MADhB,aAKA,mBAAQ,CACN,WAAc,MADhB,aAKF,sCACA,gDACE,uBAAY,CACV,WAAc,KADhB,MADF,sFAME,uBAAY,CACV,WAAc,KADhB,aANF,oCAUA,gCAEE,kBAAO,CACL,WAAc,cADhB,2TAQA,kBAAO,CACL,WAAc,cACb,kBAAO,CACN,KAAQ,qCACR,WAAc,KAFf,gBAML,2CACA,iDACA,8BACA,2FACA,gCACA,uBAAG,kBAAO,CACN,KAAQ,qCACR,WAAc,KAFf,sBAOPH,EAAWI,gBAAiB,G,kCCxNb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-posts-redis-data-types-index-mdx-5c8ff9a3e4738dc6e191.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Redis Data Types 介紹\",\n  \"description\": \"Redis在4.0之前其實只有5個資料型態，不過到了現在新的版本多了一些不同的形態如stream, geo等等，不過本篇只會針對原有的string, sort set, hash set, set, list這五個形態來做說明。\",\n  \"tags\": [\"redis\"],\n  \"date\": \"2020-08-19T16:00:00.000Z\",\n  \"published\": true\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Redis DataType 介紹`}</h1>\n    <h2>{`前言`}</h2>\n    <p>{`這篇文章其實是以前在整理Redis的文件時所做的一些資料，再拿出來寫是因為現在同事剛好也需要這樣的資訊。`}</p>\n    <p>{`Redis在4.0之前其實只有5個資料型態，不過到了現在新的版本多了一些不同的形態如stream, geo等等，不過本篇只會針對原有的string, sort set,\nhash set, set, list這五個形態來做說明。`}</p>\n    <h3>{`String 型別`}</h3>\n    <p>{`String 型態可以存放 binary, string, integer, float資料，在官網的說明是最基礎的型態，單一個Key可以存放月512MB的資料。`}</p>\n    <blockquote>\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}>{`Strings are the most basic kind of Redis value. Redis Strings are binary safe,\nthis means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object.`}</p>\n\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}><a {...{\n          \"href\": \"https://redis.io/topics/data-types\",\n          \"parentName\": \"p\"\n        }}>{`redis 官方網站`}</a></p>\n\n    </blockquote>\n    <h4>{`String 使用的幾個場景介紹`}</h4>\n    <ol>\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`圖片快取 （使用binary）`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`Configuration`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`累計次數、觀看累計次數`}</li>\n\n    </ol>\n    <blockquote>\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}>{`不過根據我的使用經驗來說，資料量在1Kb內擁有較好的網路傳輸，當今天你存放的string資料大於1kb，我建議轉換成binary資料，透過Gzip做壓縮\n才存放到Redis中才會有較好的快取效果`}</p>\n\n    </blockquote>\n    <h3>{`HashSet`}</h3>\n    <p>{`Hash set是用來存放一組相同性質的資料，這些資料HashSet(or Dictionary)或是物件的某一屬性，與String較為不同的是他可以取回單一個欄位資料\n但String必須取回所有資料（若透過Redis module可以取得Json特定的資料），單一個Key可以存放2`}\n      <sup>{`32`}</sup>\n      {` - 1的資料欄位，`}</p>\n    <blockquote>\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}>{`Redis Hashes are maps between string fields and string values, so they are the perfect data type to represent objects\n(e.g. A User with a number of fields like name, surname, age, and so forth):`}</p>\n\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}><a {...{\n          \"href\": \"https://redis.io/topics/data-types\",\n          \"parentName\": \"p\"\n        }}>{`redis 官方網站`}</a></p>\n\n    </blockquote>\n    <h4>{`Hashes的使用場景`}</h4>\n    <ol>\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`每次只需要取用一部分的資料`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`C#的Dictionary或HashSet資料型態`}</li>\n\n    </ol>\n    <h3>{`List`}</h3>\n    <p>{`List 資料型態可以想像成程式語言中的Array物件或是你可以把它時作成Queue或是Stack的物件。List 單一個Key可以存放2`}\n      <sup>{`32`}</sup>\n      {` - 1`}</p>\n    <blockquote>\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}>{`Redis Lists are simply lists of strings, sorted by insertion order.\nIt is possible to add elements to a Redis List pushing new elements on the head (on the left) or on the tail (on the right) of the list.`}</p>\n\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}><a {...{\n          \"href\": \"https://redis.io/topics/data-types\",\n          \"parentName\": \"p\"\n        }}>{`redis 官方網站`}</a></p>\n\n    </blockquote>\n    <h4>{`List的使用場景`}</h4>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`List 物件`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`無序資料`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Queue 物件`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Stack 物件`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Array 物件`}</li>\n\n    </ul>\n    <h3>{`Set`}</h3>\n    <p>{`類似於List的資料格式但不能存入相同的資料，所以內容是不能重複的預設也不會幫你排序，Sets 單一個Key可以存放2`}\n      <sup>{`32`}</sup>\n      {` - 1`}</p>\n    <h4>{`Set的使用場景`}</h4>\n    <ol>\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`文章中的Tag標籤`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`用來排除相同資料`}</li>\n\n    </ol>\n    <h3>{`Sorted Set`}</h3>\n    <p>{`Sorted Set從名字就可以知道他是一個`}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`經過`}</strong>\n      {`排序的Set所以當你每次有資料異動時都會自動的為你重新排序採用的是快速排序的演算法，\n這個資料結構可以說是Redis操作的時候成本最高的一個結構吧！通常的時間成本是`}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`O(log(N))`}</strong>\n      {`N為Key所存放的資料總量，另外他跟Set很相似內容是不能重複的`}</p>\n    <blockquote>\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}>{`Redis Sorted Sets are, similarly to Redis Sets, non repeating collections of Strings.\nThe difference is that every member of a Sorted Set is associated with score,\nthat is used in order to take the sorted set ordered, from the smallest to the greatest score.\nWhile members are unique, scores may be repeated.`}</p>\n\n\n      <p {...{\n        \"parentName\": \"blockquote\"\n      }}><a {...{\n          \"href\": \"https://redis.io/topics/data-types\",\n          \"parentName\": \"p\"\n        }}>{`redis 官方網站`}</a></p>\n\n    </blockquote>\n    <h4>{`Sorted Set的使用場景`}</h4>\n    <p>{`其實也沒什麼好說的，需要有序的資料用他準沒錯`}</p>\n    <h3>{`其他`}</h3>\n    <p>{`其他資料還有Bitmaps, HyperLogLogs, geo, stream等等，目前我也沒有實際使用過，所以就不在此介紹了`}</p>\n    <h3>{`參考連結`}</h3>\n    <p><a {...{\n        \"href\": \"https://redis.io/topics/data-types\",\n        \"parentName\": \"p\"\n      }}>{`Redis Data Types`}</a></p>\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}