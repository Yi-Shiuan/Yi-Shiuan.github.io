(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{"Bw+d":function(n,t,e){"use strict";e.r(t),e.d(t,"_frontmatter",(function(){return c})),e.d(t,"default",(function(){return p}));var r=e("zLVn"),o=(e("q1tI"),e("7ljp")),c={title:"AWS ECS Pre Production",description:"我們在aws 做Production deploy的時候，都會有一個pre production的環境，這個環境主要是為了在部署流程結束後可以做概念性驗證的環境 （主要測試：db connection是否正常、網路連線、裝機腳本等等）另一個方面可以預熱application，不過我們開始有越來越多採用docker的 application並且使用ECS的部署模式，但是ECS的Service建立後就無法修改Target Group，因此沒辦法如同EC2的部署模式只在最後切換Target Group",tags:["ecs","aws","cd","devops"],date:"2020-08-14T05:30:16.000Z",published:!1},i={_frontmatter:c};function p(n){var t=n.components,e=Object(r.a)(n,["components"]);return Object(o.mdx)("wrapper",Object.assign({},i,e,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("h1",null,"AWS ECS Pre Production"),Object(o.mdx)("h2",null,"寫在前面"),Object(o.mdx)("p",null,"我們在aws 做Production deploy的時候，都會有一個pre production的環境，這個環境主要是為了在部署流程結束後可以做概念性驗證的環境\n（主要測試：db connection是否正常、網路連線、裝機腳本等等）另一個方面可以預熱application，不過我們開始有越來越多採用docker的\napplication並且使用ECS的部署模式，但是ECS的Service建立後就無法修改Target Group，因此沒辦法如同EC2的部署模式只在最後切換Target Group"),Object(o.mdx)("h2",null,"想法與流程"),Object(o.mdx)("h3",null,"想法"),Object(o.mdx)("p",null,"在每次部署時都要產生新的Target Group與新的ECS Service，將新產生的Target Group掛載到Preparing的Load balancer rule上"))}p.isMDXComponent=!0},zLVn:function(n,t,e){"use strict";function r(n,t){if(null==n)return{};var e,r,o={},c=Object.keys(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||(o[e]=n[e]);return o}e.d(t,"a",(function(){return r}))}}]);
//# sourceMappingURL=component---src-posts-ecs-deploy-preparing-ecs-deploy-preparing-mdx-fb565a182d6b55573f77.js.map