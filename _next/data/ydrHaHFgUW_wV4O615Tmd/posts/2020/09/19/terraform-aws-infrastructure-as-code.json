{"pageProps":{"id":1600473600,"fileName":"terraform-aws-infrastructure-as-code","url":"2020/09/19/terraform-aws-infrastructure-as-code","title":"Terraform 做 AWS IaC","description":"一直在公司使用ansible來做Cloud configuration但是ansible在cloud configuration上說真的略顯不足， 在之前的文章中我們很常使用`aws cli`來做相對應的處理。使用aws cli時要有更好的可讀性與維護性，通常都以JSON的格式輸入 因此在ansible中的playbook上就會有多餘的一些步驟去設定餵給aws cli的JSON。","tags":["aws","iac","terraform"],"date":"2020-09-19T00:00:00.000Z","published":true,"content":"\n## 寫在前面\n\n一直在公司使用ansible來做Cloud configuration但是ansible在cloud configuration上說真的略顯不足，\n在之前的文章中我們很常使用`aws cli`來做相對應的處理。使用aws cli時要有更好的可讀性與維護性，通常都以JSON的格式輸入\n因此在ansible中的playbook上就會有多餘的一些步驟去設定餵給aws cli的JSON。\n\n這一篇就用terraform來建立一個aws AutoScaling Group吧！\n\n## 安裝Terraform\n\nterraform的安裝其實非常簡單，在下方的參考連結中有其他的安裝方式，我這邊主要會使用mac的安裝方式\n\n在mac安裝terraform我是透過[Homebrew](https://brew.sh/index_zh-tw)來安裝terraform\n\n```shell script\n# For mac\nbrew install hashicorp/tap/terraform\n```\n\n安裝完成後做一個簡單的驗證，開啟你習慣的terminal執行以下的command就可以知道我們是不是有安裝成功了，\n如果安裝成功就會出現跟下圖一樣的資訊出來，就可以進行下一步了！\n\n\n```shell script\nterraform -help\n```\n\n![安裝terrafrom的驗證](terraform-aws-infrastructure-as-code/terraform-install.png)\n\n> 如果透過Homebrew安裝不成功，可以試試看brew upgrade，更新一下homebrew\n\n因terraform最後會產生aws cli的command，在安裝完畢後需要安裝aws cli並且設定aws的一些infomation\n並且設定aws的access key跟secert key的部分\n\n```shell script\n# install aws cli\nbrew install awscli\n\n# configure aws setting\naws configure\n```\n\n## 初始化terraform\n\n這一篇的目標是要用terrafrom建立aws 的auto scaling group，\b在達成目標前terraform前需要先做初始化\n\n初始化其實非常容易，先在你的terraform的資料夾下先建立一個`main.tf`的黨案，定義provider\n\n執行`init`後會有下方的資訊出現並且在資料夾中會有一個`.terraform`的資料夾\n\n```hlc\nterraform {\n  required_version = \">= 0.13\"\n}\n\nprovider \"aws\"\n  region = \"ap-northeast-1\"\n}\n```\n\n\n```shell script\nterraform init\n```\n\n![terraform init訊息](terraform-aws-infrastructure-as-code/terraform-init.png)\n\n## 透過terrafrom 建立 AWS AutoScaling Group\n\n接下來要建立一個`main.tf`或是使用前一步的`main.tf`，撰寫resource的設定有關於aws 的resource定義資料\n可以參考下方的參考連結中的**terraform aws provider**\n\n```hlc\nresource \"aws_autoscaling_group\" \"asg\" {\n  name                      = \"test-autoscaling-group\"\n  max_size                  = 1\n  min_size                  = 1\n  health_check_grace_period = 300\n  health_check_type         = \"ELB\"\n  desired_capacity          = 1\n  force_delete              = true\n  availability_zones        = [\"ap-northeast-1a\", \"ap-northeast-1d\"]\n  launch_template {\n    id      = \"lt-xxxxxxxx\" # 使用前需要把Id置換掉\n    version = \"$Latest\"\n  }\n}\n```\n\n### Apply\n在terraform要真的去建立資源的command 是`apply`，在真正到aws上建立資源前會有一個預覽資料等待你的確認才會真正的建立資源\n\n```shell script\nterraform apply\n```\n\n> 如果在CI的魔是可以透過auto-approve，來略過確認輸入的情況\n\n### Plan\n\n如果你想先看看資源變更的情況或是dry run時可以使用`plan`來先做預覽\n預覽後可以直接變更資源如下方圖片中的的文字 **terraform apply \"plan\"**\n\n```shell script\nterraform plan -out plan\n\n#確認後可以執行\nterraform apply \"plan\"\n```\n\n![terraform plan](terraform-aws-infrastructure-as-code/terraform-plan.png)\n\n## Oops！我的Resource被修改了！\n\n在完成第一個resource的建立後，要建立第二個autoscaling時我用了這樣的main.tf，但是出現了一些狀況...\n\n```hlc\nresource \"aws_autoscaling_group\" \"asg\" {\n  name                      = \"test-autoscaling-group2\"\n  max_size                  = 1\n  min_size                  = 1\n  health_check_grace_period = 300\n  health_check_type         = \"ELB\"\n  desired_capacity          = 1\n  force_delete              = true\n  availability_zones        = [\"ap-northeast-1a\", \"ap-northeast-1d\"]\n  launch_template {\n    id      = \"lt-xxxxxxxx\" # 使用前需要把Id置換掉\n    version = \"$Latest\"\n  }\n}\n```\n\n這時候發現剛才建立的resource被刪除並重新建立了，\n這個原因是因為你當下的資料夾出現了terraform.tfstate的檔案，將你剛才的資源資訊存放在此以便後續的資源管理\n但...我該如何產生其他新的auto scaling group呢？\n\n答案是使用terraform workspace的方式去建立一個新的workspace，讓每一個資源都是互相獨立的\n\n```shell script\nterraform workspace new auto-scaling-group-2\n```\n\n![terraform workspace](terraform-aws-infrastructure-as-code/terraform-workspace.png)\n\n接下來再重新執行一次plan指令就會發現預覽的資訊上變成了新建而不是刪除重建的狀態\n\n## Terraform的文件管理分享\n\n隨著管理的資源的建立開始會發現有許多重複的main.tf，然後要修改某個資訊要修改多個main.tf，那要如何去共用這些main.tf呢？\n\n在結構分享前我先介紹幾個terraform重要的檔案，詳細的設定請看參考連結中的`terraform configuration language`官網介紹\n\n- main.tf\n\n    main.tf是要設定AWS或是其他雲端的資源設定\n\n- variables.tf\n\n    variables.tf 則是預先定義變數，在main.tf中所用的變數資料都要在此先做定義\n\n- xxxxx.tfvars\n\n    `.tfvars` 則是預先輸入好的參數設定，後續就不需要在cli中輸入大量的資訊\n\n\n![terraform 的資料夾結構](terraform-aws-infrastructure-as-code/terraform-folder.png)\n\n在資料夾結構中，我依照aws的服務去建立相關的資料夾（如：alb, auto scaling group等等）去建立資料夾\n在每個資料夾下都會有main.tf, variables.tf, xxxxx.tfvars的檔案，在workspace的命名上會採用與tfvars的檔名相同\n並且會把workspace的名稱打在aws 服務的tag中方便未來做管理。\n\n> Tips: 在variables.tf中的變數宣告建議都放上預設值，未來要刪除資源時會更加方便！\n\n\n## 參考連結\n\n[Install Terraform](https://learn.hashicorp.com/tutorials/terraform/install-cli#install-terraform)\n\n[terraform aws provider](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n\n[terraform configuration language](https://www.terraform.io/docs/configuration/index.html)\n","allTags":{"react":5,"next.js":3,"i18n":1,"gatsby.js":1,"postgresql":1,"database":2,"dotnet":1,"aws":4,"devops":7,"prevision":6,"iot":2,"platformio":2,"arduino":2,"esp":1,"elk":3,"azure":4,"vulnerability":1,"ssl":2,"vmss":1,"cd":3,"study4":1,"dotnetconf":1,"selenium":2,"tdd":1,"jest":1,"frontend":1,"layout":1,"ec2":1,"iac":1,"terraform":1,"ci":1,"jenkins":1,"ecs":1,"ansible":1,"redis":2,"protobuf":2,"serialize":2,"deserialize":2,"pub":1,"sub":1,"notify":1}},"__N_SSG":true}