{"pageProps":{"current":3,"posts":[{"id":1609977600,"fileName":"best-practice-layout-in-nextjs","url":"2021/01/07/best-practice-layout-in-nextjs","title":"Next.js 的Layout最佳配置","description":"新專案即將完成之際，我們開始對各個頁面上的效能與一些過去被我們忽略的問題進行修正， 在這修正的過程中我發現了在每一次頁面切換時都會出現網站的Logo消失又再出現的問題， Logo是一個經常變動的圖片所以在專案中是透過GQL取得Logo的CDN位置後才做渲染的， 再深入排查後才發現原來過去我的觀念不是非常正確所以用這篇來筆記一下正確地處理做法，當作小抄避免未來再犯同樣的錯誤。","date":"2021-01-07T00:00:00.000Z","tags":["react","next.js","frontend","layout"],"published":true,"content":"\n## 前情提要\n\n新專案即將完成之際，我們開始對各個頁面上的效能與一些過去被我們忽略的問題進行修正，\n在這修正的過程中我發現了在每一次頁面切換時都會出現網站的Logo消失又再出現的問題，\nLogo是一個經常變動的圖片所以在專案中是透過GQL取得Logo的CDN位置後才做渲染的，\n再深入排查後才發現原來過去我的觀念不是非常正確所以用這篇來筆記一下正確地處理做法，當作小抄避免未來再犯同樣的錯誤。\n\n## Next.js Layout最佳配置\n\n在Next.js的Layout最佳配置應該是把Layout的component放在`_app.tsx`中，在轉換頁面時就不會再出現前情提要的相關問題了。\n\n```typescript jsx\nfunction App({Component, pageProps }: AppProps): any {\n\tconst apolloClient: any = useApollo(pageProps.initialApolloState);\n\n\treturn <ApolloProvider client={apolloClient}>\n\t\t    <Layout>\n\t\t\t    <Component {...pageProps} />\n\t\t\t</Layout>\n\t\t</ApolloProvider>\n}\n```\n\n```typescript jsx\nconst Index: NextPage<any> = (props: any): any => {\n\treturn <>\n            {/*index content*/}\n\t\t</>\n};\n```\n\n\n### 在得到結論前的一些排查點\n\n在一開始我們的`_app.tsx`與`index.tsx`或其他page都是這樣的設計，在Layout中有`Header`與`Footer`兩個component以及負責所有頁面上的版面配置，\n其中Header這個component中去取得GQL資料，但因為他是屬於React FunctionComponent的範疇，故無法使用getInitialProps這類的function\n\n```typescript jsx\nfunction App({Component, pageProps }: AppProps): any {\n\tconst apolloClient: any = useApollo(pageProps.initialApolloState);\n\n\treturn <ApolloProvider client={apolloClient}>\n\t\t\t<Component {...pageProps} />\n\t\t</ApolloProvider>\n}\n```\n\n```typescript jsx\nconst Index: NextPage<any> = (props: any): any => {\n\treturn <Layout>\n            {/*index content*/}\n\t\t</Layout>\n};\n```\n\n1. 在方案一的我是透過React Memo的方式Cache Layout起來下次使用Layout 這個component時就不會再重新渲染，但結果是仍然每次重新渲染Layout\n1. 在_app.tsx中取得相關的Layout配置所需要的圖檔與文字，透過props的方式傳入給Layout中並讓Header在Server side 渲染，\n但因為progress image的使用所以Logo仍然會有閃一下的情況\n\n然後在官網上看到了這麼一段....\n最後我把Layout放置到`_app.tsx`中，就可以如我們預期的一開始出現了progress image的Logo再出現真正的Logo，在每次轉頁時也沒有重新渲染相關的Layout component\n\n我想主要的幾個原因是，_app.tsx的執行時間以及在轉頁渲染的最小單位是整個Next page不是採用差異的方式重新渲染。\n\n> Next.js uses the App component to initialize pages. You can override it and control the page initialization. Which allows you to do amazing things like:\n>\n> - Persisting layout between page changes\n> - Keeping state when navigating pages\n> - Custom error handling using componentDidCatch\n> - Inject additional data into pages\n> - Add global CSS\n>\n> [Next.js Custom APP](https://nextjs.org/docs/advanced-features/custom-app)\n\n### 相關連結\n\n[Next.js Custom APP](https://nextjs.org/docs/advanced-features/custom-app)\n"},{"id":1607472000,"fileName":"ec2-provisioned-self-install","url":"2020/12/09/ec2-provisioned-self-install","title":"如何讓AWS EC2開機後就能上線","description":"在雲端服務一定會遇到的是機器的擴展(scale out)與縮編(scale in)的問題，如果一個AutoScaling Group觸發了機器的成長時肯定是無法靠手動 的方式來安裝機器，所以必須要透過全資動畫的方式進行，這時候我一開始的想法是在AutoScaling發生的時候觸法Jenkins的Job來安裝系統， 但這有個問題是我整個aws的服務都必須依賴在Jenkins上，後來同事指導了一個做法只需要透過AWS的設定就可以自動裝機了！","tags":["ec2","aws","cd","devops","prevision"],"date":"2020-12-09T00:00:00.000Z","published":true,"content":"\n## 寫在前面\n\n在雲端服務一定會遇到的是機器的擴展(scale out)與縮編(scale in)的問題，如果一個AutoScaling Group觸發了機器的成長時肯定是無法靠手動\n的方式來安裝機器，所以必須要透過全資動畫的方式進行，這時候我一開始的想法是在AutoScaling發生的時候觸法Jenkins的Job來安裝系統，\n但這有個問題是我整個aws的服務都必須依賴在Jenkins上，後來同事指導了一個做法只需要透過AWS的設定就可以自動裝機了！\n\n## User Data\n\n一直以來都沒從還沒注意過AWS在建立EC2或是在Launch template介面上的`user data`，user data中的指令AWS會在我們EC2開機的過程中為我們執行\n如此一來就可以不需要依賴任何一個工具就可以完成茲動畫的作業了。\n\n![create instance 的 user data](ec2-provisioned-self-install/ec2-create-instance.png)\n\n![launch template 的 user data](ec2-provisioned-self-install/launch-template.png)\n\n```sh\n#!/bin/bash -xe\naws s3 cp s3://{{your s3 bucket}}/main.sh main.sh --region {{your region}}\nbash main.sh\n```\n\n> 在我同事的指點中，他建議在user data中不要放置帶多的指令碼而是用來下載入口指令碼與執行入口指令碼的內容就好\n\n### main.sh\n\n在入口腳本中一個很重要的事情是辨識機器需要安裝哪些東西以及要做哪些事情，但不太想讓user data有太多的版本避免團隊成員中複製時出錯，\n所以在EC2的Tag中做了一些手腳，依照EC2 Tag的設定安裝不同的軟體\n\n在取得EC2 Tag時其實需要先做很多事情，首先要先取得EC2 instance Id...但取的EC2 Instance Id前要先取得Region....\n然後發現有個的API endpoint，這API endpoint 主要是取得主機的相關資料，然侯回傳的是一個Json的資料格式\n\n在shell 操作Json的資料格式，不外乎就是jq這個套件了...所以我的入口腳本第一件事就是安裝jq，接下來才是去取得EC2 instance的資料\n\n當有了instance id與region時就可以取得Tag資訊了\n\n> EC2的Tag\n> 1. Service: 設定機器主要承載的服務類型\n> 2. Docker: 是否為這台機器安裝docker\n\n```sh\n#!/bin/bash -xe\n\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\nsudo yum install -y jq\nsudo apt-get install -y jq\n\nREGION=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r`\naws s3 cp s3://ec2-initial-script/functions.sh ./functions.sh --region ap-northeast-1\nsource ./functions.sh\nlog \"Start setup script\"\n\nlog \"EC2 Instance Process\" \"Region:\" $REGION\nEC2_INSTANCE_ID=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .instanceId -r`\nlog \"EC2 instance Id: ${EC2_INSTANCE_ID}\"\nTAGS=\"$(aws ec2 describe-tags --filter \"Name=resource-id,Values=${EC2_INSTANCE_ID}\" --region ${REGION})\"\n\nlog \"DOCKER Process\"\nDOCKER=`echo $TAGS | jq -r '.Tag[] | select(.Key == \"Docker\").Value'`\nlog \"DOCKER Install ${DOCKER}\"\n\nif [[ \"$DOCKER\" == \"yes\" ]]; then\n    log \"DOCKER Install ... \"\n    sudo yum update -y\n    sudo amazon-linux-extras install docker -y\n    sudo service docker start\n    sudo usermod -a -G docker ec2-user\n    sudo systemctl restart docker\n    log \"DOCKER Install Successfully\"\n\n    log \"DOCKER-COMPOSE Install ... \"\n    sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)\" \\\n              -o /usr/local/bin/docker-compose\n    sudo chmod +x /usr/local/bin/docker-compose\n    sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n    sudo systemctl enable docker\n    log \"DOCKER-COMPOSE Install Successfully \"\nfi;\n\nSERVICE=`echo $TAGS | jq -r '.Tag[] | select(.Key == \"Service\").Value'`\nlog \"Download ${SERVICE}.sh\"\naws s3 cp s3://{{s3 bucket}}/$SERVICE/install.sh /install.sh\n\nlog \"Execute ${SERVICE} script\"\nbash install.sh \"${TAGS}\" \"${REGION}\" \"${EC2_INSTANCE_ID}\"\n\nlog \"End scripting\"\n```\n### install.sh\n\nuser data只負責下載與執行入口腳本在入口腳本中還要執行服務腳本，服務腳本是用來安裝application的！\n在入口腳本中會用EC2的Service Tag到S3 Bucket下載對應的install.sh來安裝與設定application所需要的設定\n\n#### ECS的安裝腳本\n\n```sh\n#!/bin/bash -xe\n\nsource ./functions.sh\nTAGS=$1\nREGION=$2\nINSTANCE=$3\n\nlog \"ECS Install ... \"\n\nECS_CLUSTER=`echo $TAGS | jq -r '.Tag[] | select(.Key == \"ECS:cluster\").Value'`\nsudo mkdir /etc/ecs\ncat << EOF > /etc/ecs/ecs.config\nECS_DATADIR=/data\nECS_ENABLE_TASK_IAM_ROLE=true\nECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true\nECS_LOGFILE=/log/ecs-agent.log\nECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"]\nECS_LOGLEVEL=info\nECS_CLUSTER=$ECS_CLUSTER\nEOF\n\ndocker run -d --name ecs-agent \\\n    --detach=true \\\n    --restart=always \\\n    --volume=/var/run:/var/run \\\n    --volume=/var/log/ecs/:/log \\\n    --volume=/var/lib/ecs/data:/data \\\n    --volume=/etc/ecs:/etc/ecs \\\n    --net=host \\\n    --env-file=/etc/ecs/ecs.config \\\n    --log-driver json-file \\\n    --log-opt max-size=100m \\\n    amazon/amazon-ecs-agent:latest\n\nlog \"ECS Install Successfully \"\n```\n\n### 總結\n\n使用user data可以做到系統自動化而且還不需要依賴任何的工具，不過在使用這樣的方式時需要對整個OS, shell script（如果用windows就得對powershell熟悉）\n以及對aws cli有足夠的能力才有機會做出這樣的腳本，有了這樣的腳本才能做到100％的自動化。\n在目前已經做到完整的自動化的部署模式，我們團隊的CI server, Staging環境每天下班後自動關機上班前會自動開機並且安裝整個application\n在production的環境裡，自動化擴展時Windows的機器約莫15分鐘，Linux的機器約莫5~7分鐘就能設定完成並且服務\n\n> 在AWS的Image中只設定了預先裝好IIS的Windows機器，此目的是為了節省安裝IIS的時間成本讓機器可以更快的上線服務減少支出\n> 其他Linux的機器都只有選擇AWS Linux2的image，並沒有特別做任何設定\n>\n> windows的機器在AWS開機使用T3.Medium的速度一般來說都在15分鐘左右完成\n\n### EC2 instance 的相關時間估算\n\n| Target         | Script  | 請求機器    | 移交機器    | Provisioned | Health check | 上線時間      |\n|----------------|---------|---------|---------|-------------|--------------|-----------|\n| Windows Server | 3~5 min | 1.5 min | 7~9 min | 5 min       | 1.5min       | 15~22 min |\n| Linux Server   | 3~5 min | 1.5 min | 5~7 min | 3 min       | 1.5min       | 9~13 min  |\n\n## 相關連結\n\n[JQ github page](https://stedolan.github.io/jq/)\n"},{"id":1600473600,"fileName":"terraform-aws-infrastructure-as-code","url":"2020/09/19/terraform-aws-infrastructure-as-code","title":"Terraform 做 AWS IaC","description":"一直在公司使用ansible來做Cloud configuration但是ansible在cloud configuration上說真的略顯不足， 在之前的文章中我們很常使用`aws cli`來做相對應的處理。使用aws cli時要有更好的可讀性與維護性，通常都以JSON的格式輸入 因此在ansible中的playbook上就會有多餘的一些步驟去設定餵給aws cli的JSON。","tags":["aws","iac","terraform"],"date":"2020-09-19T00:00:00.000Z","published":true,"content":"\n## 寫在前面\n\n一直在公司使用ansible來做Cloud configuration但是ansible在cloud configuration上說真的略顯不足，\n在之前的文章中我們很常使用`aws cli`來做相對應的處理。使用aws cli時要有更好的可讀性與維護性，通常都以JSON的格式輸入\n因此在ansible中的playbook上就會有多餘的一些步驟去設定餵給aws cli的JSON。\n\n這一篇就用terraform來建立一個aws AutoScaling Group吧！\n\n## 安裝Terraform\n\nterraform的安裝其實非常簡單，在下方的參考連結中有其他的安裝方式，我這邊主要會使用mac的安裝方式\n\n在mac安裝terraform我是透過[Homebrew](https://brew.sh/index_zh-tw)來安裝terraform\n\n```shell script\n# For mac\nbrew install hashicorp/tap/terraform\n```\n\n安裝完成後做一個簡單的驗證，開啟你習慣的terminal執行以下的command就可以知道我們是不是有安裝成功了，\n如果安裝成功就會出現跟下圖一樣的資訊出來，就可以進行下一步了！\n\n\n```shell script\nterraform -help\n```\n\n![安裝terrafrom的驗證](terraform-aws-infrastructure-as-code/terraform-install.png)\n\n> 如果透過Homebrew安裝不成功，可以試試看brew upgrade，更新一下homebrew\n\n因terraform最後會產生aws cli的command，在安裝完畢後需要安裝aws cli並且設定aws的一些infomation\n並且設定aws的access key跟secert key的部分\n\n```shell script\n# install aws cli\nbrew install awscli\n\n# configure aws setting\naws configure\n```\n\n## 初始化terraform\n\n這一篇的目標是要用terrafrom建立aws 的auto scaling group，\b在達成目標前terraform前需要先做初始化\n\n初始化其實非常容易，先在你的terraform的資料夾下先建立一個`main.tf`的黨案，定義provider\n\n執行`init`後會有下方的資訊出現並且在資料夾中會有一個`.terraform`的資料夾\n\n```hlc\nterraform {\n  required_version = \">= 0.13\"\n}\n\nprovider \"aws\"\n  region = \"ap-northeast-1\"\n}\n```\n\n\n```shell script\nterraform init\n```\n\n![terraform init訊息](terraform-aws-infrastructure-as-code/terraform-init.png)\n\n## 透過terrafrom 建立 AWS AutoScaling Group\n\n接下來要建立一個`main.tf`或是使用前一步的`main.tf`，撰寫resource的設定有關於aws 的resource定義資料\n可以參考下方的參考連結中的**terraform aws provider**\n\n```hlc\nresource \"aws_autoscaling_group\" \"asg\" {\n  name                      = \"test-autoscaling-group\"\n  max_size                  = 1\n  min_size                  = 1\n  health_check_grace_period = 300\n  health_check_type         = \"ELB\"\n  desired_capacity          = 1\n  force_delete              = true\n  availability_zones        = [\"ap-northeast-1a\", \"ap-northeast-1d\"]\n  launch_template {\n    id      = \"lt-xxxxxxxx\" # 使用前需要把Id置換掉\n    version = \"$Latest\"\n  }\n}\n```\n\n### Apply\n在terraform要真的去建立資源的command 是`apply`，在真正到aws上建立資源前會有一個預覽資料等待你的確認才會真正的建立資源\n\n```shell script\nterraform apply\n```\n\n> 如果在CI的魔是可以透過auto-approve，來略過確認輸入的情況\n\n### Plan\n\n如果你想先看看資源變更的情況或是dry run時可以使用`plan`來先做預覽\n預覽後可以直接變更資源如下方圖片中的的文字 **terraform apply \"plan\"**\n\n```shell script\nterraform plan -out plan\n\n#確認後可以執行\nterraform apply \"plan\"\n```\n\n![terraform plan](terraform-aws-infrastructure-as-code/terraform-plan.png)\n\n## Oops！我的Resource被修改了！\n\n在完成第一個resource的建立後，要建立第二個autoscaling時我用了這樣的main.tf，但是出現了一些狀況...\n\n```hlc\nresource \"aws_autoscaling_group\" \"asg\" {\n  name                      = \"test-autoscaling-group2\"\n  max_size                  = 1\n  min_size                  = 1\n  health_check_grace_period = 300\n  health_check_type         = \"ELB\"\n  desired_capacity          = 1\n  force_delete              = true\n  availability_zones        = [\"ap-northeast-1a\", \"ap-northeast-1d\"]\n  launch_template {\n    id      = \"lt-xxxxxxxx\" # 使用前需要把Id置換掉\n    version = \"$Latest\"\n  }\n}\n```\n\n這時候發現剛才建立的resource被刪除並重新建立了，\n這個原因是因為你當下的資料夾出現了terraform.tfstate的檔案，將你剛才的資源資訊存放在此以便後續的資源管理\n但...我該如何產生其他新的auto scaling group呢？\n\n答案是使用terraform workspace的方式去建立一個新的workspace，讓每一個資源都是互相獨立的\n\n```shell script\nterraform workspace new auto-scaling-group-2\n```\n\n![terraform workspace](terraform-aws-infrastructure-as-code/terraform-workspace.png)\n\n接下來再重新執行一次plan指令就會發現預覽的資訊上變成了新建而不是刪除重建的狀態\n\n## Terraform的文件管理分享\n\n隨著管理的資源的建立開始會發現有許多重複的main.tf，然後要修改某個資訊要修改多個main.tf，那要如何去共用這些main.tf呢？\n\n在結構分享前我先介紹幾個terraform重要的檔案，詳細的設定請看參考連結中的`terraform configuration language`官網介紹\n\n- main.tf\n\n    main.tf是要設定AWS或是其他雲端的資源設定\n\n- variables.tf\n\n    variables.tf 則是預先定義變數，在main.tf中所用的變數資料都要在此先做定義\n\n- xxxxx.tfvars\n\n    `.tfvars` 則是預先輸入好的參數設定，後續就不需要在cli中輸入大量的資訊\n\n\n![terraform 的資料夾結構](terraform-aws-infrastructure-as-code/terraform-folder.png)\n\n在資料夾結構中，我依照aws的服務去建立相關的資料夾（如：alb, auto scaling group等等）去建立資料夾\n在每個資料夾下都會有main.tf, variables.tf, xxxxx.tfvars的檔案，在workspace的命名上會採用與tfvars的檔名相同\n並且會把workspace的名稱打在aws 服務的tag中方便未來做管理。\n\n> Tips: 在variables.tf中的變數宣告建議都放上預設值，未來要刪除資源時會更加方便！\n\n\n## 參考連結\n\n[Install Terraform](https://learn.hashicorp.com/tutorials/terraform/install-cli#install-terraform)\n\n[terraform aws provider](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n\n[terraform configuration language](https://www.terraform.io/docs/configuration/index.html)\n"},{"id":1599350400,"fileName":"jenkins-selenium-grid","url":"2020/09/06/jenkins-selenium-grid","title":"透過Jenkins啟動Selenium Grid執行自動化測試","description":"QA測試當然不是只測試RD這次上線的範圍而已，而是把過去上線的功能都要在驗過一遍才能算是經過QA測試的版本，但是隨著時間的積累線上的系統越來越多 有時候QA無法透過手動的方式完成所有驗證，這時候都會導入自動畫測試selenium來協助QA做完系統的驗證，在目前我服務的公司把CD與自動化測試的部分做了整合， 當QAT部署完成後就會驅動QA的自動化驗證，但是當自動化驗證的Job越來越多一台機器已經很難在3-5分鐘內完成自動化測試怎麼辦？","tags":["ci","selenium","jenkins"],"date":"2020-09-06T00:00:00.000Z","published":true,"content":"\n## 寫在前面\n\n一般我們上線流程都含有QA的測試階段，QA的測試與RD的開發有著很大的區別...\n\nQA測試當然不是只測試RD這次上線的範圍而已，而是把過去上線的功能都要在驗過一遍才能算是`經過QA測試`的版本，但是隨著時間的積累線上的系統越來越多\n有時候QA無法透過手動的方式完成所有驗證，這時候都會導入自動畫測試selenium來協助QA做完系統的驗證，在目前我服務的公司把CD與自動化測試的部分做了整合，\n當QAT部署完成後就會驅動QA的自動化驗證，但是當自動化驗證的Job越來越多一台機器已經很難在3-5分鐘內完成自動化測試怎麼辦？\n\n在網路上很多採用Selenium Grid的人，大多都是有一個需求是`多瀏覽器測試`，目前我們只針對chrome做測試但他也能在多台機器上為我們完成許多\n自動化測試的需求，我們則是因為許多小而美的自動化測試需要被完成\n\n> 在做自動化測試的時候，我的建議是每一次只驗證一項功能是否如我們預期的運作，然後把每個工作都拆分成小的Task來完成\n>\n> 好處是可以透過Selenium Grid同時執行驗證減少時間成本，另外也可以避免某一個功能驗證失效，而導致後面的功能無法驗證\n\n## 架構說明\n\nJenkins我是採用Master跟Agent的方式建制的，Selenium 也適用Hub跟Node的方式建置的\n\n![jenkins 與 Selenium Grid架構圖](jenkins-selenium-grid/jenkins-selenium.png)\n\nJenkins與Selenium均採用docker並結合docker compose起動，這邊是我撰寫的`docker-compose.yml`\n\n> 在Selenium Node的部分是採用linux的版本，主要原因是雲端服務的Windows機器價格比較高，所以在部署服務上以linux為主\n\n```yaml\nversion: '3.7'\nservices:\n  master:\n    image: jenkins/jenkins:2.254\n    logging:\n      options:\n        max-size: 100m\n        max-file: \"1\"\n    restart: always\n    user: root\n    networks:\n      - net\n    ports:\n      - \"80:8080\"\n      - \"50000:50000\"\n    volumes:\n      - jenkins:/var/jenkins_home\n    environment:\n      JAVA_OPTS: -Duser.timezone=Asia/Taipei\n      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8\n\n  test:\n    image: docker.boyu66.cc/common/selenium:4.2\n    user: root\n    logging:\n      options:\n        max-size: 100m\n        max-file: \"1\"\n    networks:\n      - net\n    depends_on:\n      - master\n    restart: always\n    volumes:\n      - test:/home/root\n    environment:\n      JAVA_OPTS: -Duser.timezone=Asia/Taipei\n    command: -url http://jenkins.boyu66.cc -workDir /home/root/agent {secretKey} TestAgent\n\n  hub:\n    image: selenium/hub:3.141.59-20200409\n    user: root\n    ports:\n      - \"4444:4444\"\n    logging:\n      options:\n        max-size: 100m\n        max-file: \"1\"\n    networks:\n      - net\n    depends_on:\n      - master\n    restart: always\n\n  chrome:\n    image: selenium/node-chrome:3.141.59-20200409\n    user: root\n    networks:\n      - net\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      NODE_MAX_INSTANCES: 10\n      NODE_APPLICATION_NAME: chrome\n      NODE_MAX_SESSION: 10\n      JAVA_OPTS: -Xmx512m\n\n\nnetworks:\n  net:\n    driver: bridge\n\nvolumes:\n  jenkins:\n  test:\n```\n\n## 建立Jenkins test agent的docker image\n\n在test agent 的dockerfile我選用了ubuntu作為base image，時區的部分設定到了台北並安裝openjdk等等的套件\n\n```dockerfile\nFROM ubuntu:18.04\n\nARG VERSION=4.2\nENV TZ='Asia/Taipei' \\\n    HOME=/home/root\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends software-properties-common \\\n      openjdk-8-jre curl git \\\n      && apt-get clean\n\nRUN curl --create-dirs -fsSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar \\\n      && chmod 755 /usr/share/jenkins \\\n      && chmod 644 /usr/share/jenkins/slave.jar\n\nWORKDIR /home/root\nUSER root\n\n## Jenkins jnlp slave ##\nCOPY jenkins-slave.sh jenkins-slave.sh\n\n\nENTRYPOINT [\"bash\", \"/home/root/jenkins-slave.sh\"]\n```\n\n最後將Jenkins的Job指定到Test Agent上執行，在Selenium的部分把webdriver的設定改道遠端的位置上就可以享受Selenium Grid了！\n\n## 參考資料\n\n[Selenium Grid 中文文黨](https://wizardforcel.gitbooks.io/selenium-doc/content/official-site/selenium-grid.html)\n"},{"id":1599091200,"fileName":"ecs-deploy-preparing","url":"2020/09/03/ecs-deploy-preparing","title":"AWS ECS Preparing Release 紀錄","description":"我們在aws 做Production deploy的時候，都會有一個pre production的環境，這個環境主要是為了在部署流程結束後可以做概念性驗證的環境 （主要測試：db connection是否正常、網路連線、裝機腳本等等）另一個方面可以預熱application，不過我們開始有越來越多採用docker的 application並且使用ECS的部署模式，但是ECS的Service建立後就無法修改Target Group，因此沒辦法如同EC2的部署模式只在最後切換Target Group","tags":["ecs","aws","cd","devops","prevision","ansible"],"date":"2020-09-03T00:00:00.000Z","published":true,"content":"\n## 寫在前面\n\n我們在aws 做Production deploy的時候，都會有一個pre production的環境，這個環境主要是為了在部署流程結束後可以做概念性驗證的環境\n（主要測試：db connection是否正常、網路連線、裝機腳本等等）另一個方面可以預熱application，不過我們開始有越來越多採用docker的\napplication並且使用ECS的部署模式，但是ECS的Service建立後就無法修改Target Group，因此沒辦法如同EC2的部署模式只在最後切換Target Group\n\n## 構思&實作\n\n一開始其實想得很簡單，就是每次部署時都要產生新的 Target group 與新的ECS Service，\n將新產生的Target Group掛載到ELB的preparing規則上，然後驗證完畢後就把這組Target Group掛載到ELB的 public規則上就完成了一次的部署\n\n但...事件總是沒想像中的美好，原先預計兩週內可以完成的項目變到了三週(其實中間也有對自己的要求增加ex: script可以重跑、自動移除舊版本等等)\n\n### Deploy Configuration\n\n這個是為了減少使用者輸入資訊所做的一個設定，內容主要如下\n\n```yaml\nVPC:\nRegion:\nHealthCheck:\n    Path: \"/\"\n    UnhealthyThreshold: 2\n    HealthyThreshold: 5\nLoadBalancer:\n    Preparing:\n    Public:\nAutoScaling:\n    Desired: 2\n    MaxCount: 10\n    MinCount: 2\nPolicies:\n    - Name: Scale-By-CPU-Usage\n      CoolDown: 150\n      Threshold: 75.0\n      Metric: ECSServiceAverageCPUUtilization\n    - Name: Scale-By-Memory-Usage\n      CoolDown: 150\n      Threshold: 75.0\n      Metric: ECSServiceAverageMemoryUtilization\n```\n\n### Step1. 建立Target Group\n\n在建立Target Group其實沒什麼坑主要踩到的就是Target group的名字不能超過**32**個字所以在命名規劃上需要思考一下該如何呈現\n> 我的命名規則是：環境-服務名稱-版本號\n\n這一步執行的結果需要將內容記錄下來，在修改ELB的rule時會需要用到\n\n```yaml\n- name: Create Target Group\n  elb_target_group:\n    vpc_id: \"{{ VPC }}\"\n    region: \"{{ Region }}\"\n    state: present\n    name: \"{{ name }}\"\n    protocol: http\n    port: 80\n    health_check_protocol: http\n    health_check_interval: 30\n    health_check_timeout: 5\n    health_check_path: \"{{ HealthCheck.Path }}\"\n    unhealthy_threshold_count: \"{{ HealthCheck.UnhealthyThreshold }}\"\n    healthy_threshold_count: \"{{ HealthCheck.HealthyThreshold }}\"\n    successful_response_codes: \"200\"\n    target_type: instance\n    deregistration_delay_timeout: 60\n    tags:\n      Cluster: \"{{ cluster }}\"\n      ENV: \"{{ env }}\"\n      Version: \"{{ version }}\"\n      Name: \"{{ name }}\"\n      CreateTime: \"{{ lookup('pipe','date +%Y%m%d') }}\"\n  register: target_group_result\n```\n\n### Step2. 連結ELB 的規則\n\n這一步在ansible中這定較為複雜所以改用了aws cli來處理，如果你想用純的ansible的方式處理，可以參考\n[這篇(elb_application_lb)](https://docs.ansible.com/ansible/latest/modules/elb_application_lb_module.html#elb-application-lb-module)\n\nansible的回傳都是陣列的形式所以在存取result的時候需要取得第一筆資料（如果你建立了多個target group\n就可以用loop來處理）\n\n```yaml\n- name: Attach new target group to preparing load balancer rule\n  shell: |\n    aws elbv2 modify-rule \\\n      --actions Type=forward,TargetGroupArn={{ target_group_result.results[0].target_group_arn }} \\\n      --rule-arn {{ LoadBalancer.Preparing }} \\\n      --region {{ Region }}\n```\n\n### Step3. 註冊新的Task Definition\n\n這一步驟來說應該是最複雜的一部分，我的Task Definition是由專案中的一個Configuration檔案設定\n在CI建置完成後上傳到artifact server，在執行部屬時用ansible下載到Deploy server上在讀取到\nansible的變數中。\n\n在專案中的Configuration不是一整份的設定值，他只記錄了一部分的資訊(ex: cpu, memory, family等)\n主要的原因是有些資料需要在deploy時才能決定(ex: image version, env...)，\n所以我會在註冊task definition前先透過configuration建立一份完整的task definition，\n再透過aws cli來註冊新的task definition\n\n這邊你會有個疑問，為何不直接採用\n[ansible module](https://docs.ansible.com/ansible/latest/modules/ecs_taskdefinition_module.html#ecs-taskdefinition-module)\n呢?主要原因是之前我們就有ecs deploy的CD流程，當時候有些參數我們需要但ansible無法支援\n所以轉用aws cli的方式進行。\n\n```yaml\n- name: \"Register Task Definition\"\n  shell: |\n    aws ecs register-task-definition \\\n      --cli-input-json '{{ td_setting | to_json }}' \\\n      --region {{ Region }};\n```\n\n### Step4. 新建ECS Service\n\n這一步我依舊採用aws cli來建立service，主要的原因是我的service通常會由兩個target group\n指向兩個不同的ELB與domain，在ansible官方網站上並沒有太多的說明與所需要的參數，因此我轉用了\naws cli，如同step3我會先將所需要的設定在一個ansible task上做好 產生了`service_setting`的參數\n在執行cli時將參數轉換成JSON代入\n\n```yaml\n- name: \"Create ECS service {{ service_setting.serviceName }}\"\n  shell: |\n    aws ecs create-service \\\n      --service-name '{{ service_setting.serviceName }}' \\\n      --cli-input-json '{{ service_setting | to_json }}' \\\n      --region {{ Region }};\n  register: ecs_service_create\n```\n\n## 切換Service Version\n\n切換服務版本這是一個比較大的工程，剛才的部署的複雜度更高一些，主要概念就是將新產生的target group\n掛載到真正線上服務的ELB上，不過呢這件事情衍生了許多細細小小的項目要處理的細節也比較多\n\n### Step1. 確認Target group health count\n\n要切換前一定要先檢查Target group的target狀態，如果沒確認切換了一個還在做health check的target\ngroup就會發生線上可能當下沒有機器服務的窘境，所以第一步肯定就是確認health count\n\n```yaml\n- name: Get Target Group Informantion\n  elb_target_group_info:\n    region: \"{{ Region }}\"\n    collect_targets_health: yes\n    names: \"{{ switch_target_group }}\"\n  register: target_group_result\n  failed_when: (target_group_result | json_query('target_groups[].targets_health_description[].target_health.state') | length) < {{ AutoScaling.Desired }}\n```\n\n當如果target的health count沒有達到要求數量我就讓playbook失敗，之前在ec2的做法是要完全healthy\n才能夠往下運行但這樣會遇到當下要switch會無法switch，所以這次改變一下做法讓target的health count\n只要大於要求數量即可\n\n### Step2. 取得public當前的target group\n\n為什麼要取得當前的target group？主要原因是怕瞬斷的情況發生，所以在切換的時候會有一個時間區間同時\n有兩個版本在運行最後再將舊版本移除\n\n取得ELB中的rule資料ansible並沒有太好的方式處理，所以這道題還是只能靠aws cli來協助了，aws cli 只需要輸入public rule的arn就可以取得了\n詳細可以看[aws cli](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/elbv2/describe-rules.html) 的官方文件\n\n```yaml\n- name: \"Get load balancer rule for {{ service_name | upper }}\"\n  shell: |\n    aws elbv2 describe-rules \\\n      --rule-arns {{ LoadBalancer.Public | join(' ') }} \\\n      --region {{ Region }}\n  register: current_rules\n```\n\n接下來這個就需要比較耐心地來處理了，因為ansible shell的回傳result會有個stdout屬性，這就是aws cli最後回傳的資料，所以我們要解析這個\n資訊，然後ansible 的json_query是用[這個](https://jmespath.org/)來實作的，所以我們可以透過這個先取得我們想要的結果，當然他會有一個target group arn資料\n不過我們後面需要一些壓在target group tag上的資料，所以我在這邊把他先取回來\n\n```yaml\n- name: Get target group informantion of current load balance setting\n  elb_target_group_info:\n    region: \"{{ Region }}\"\n    target_group_arns: \"{{ current_rules.stdout | from_json | json_query('Rules[].Actions[].ForwardConfig.TargetGroups[].TargetGroupArn') }}\"\n  register: current_target_group_result\n```\n\n### Step3. 把Prepare的target group跟public的整合在一起\n\n在ansible還時沒有一個簡單的設定，去修改ELB rule的target group連結，所以還是得透過aws cli來作了\n\n>下面的ansible tasks我將它設定成一個role，主要原因是我有兩個target group在處理，\n>`set_fact`去跑loop的情況會比較複雜所以我設計成一個role，在playbook上採用loop\n>來執行這個role，如此一來邏輯比較清晰也比較好維護\n\n如此一來在public 的規則上就有兩個target group的容器在服務了，這樣的情況我會讓他維持約1分鐘，再將原先的target group移除\n\n ```yaml\n- name: Generate load balance rule setting\n  set_fact:\n    target_rule_setting: |\n      [\n        {\n          \"Type\": \"forward\",\n          \"ForwardConfig\": {\n            \"TargetGroups\": [\n              {\n                \"TargetGroupArn\": '{{ target_group[0].arn }}',\n                \"Weight\": {{ target_group[0].weight }}\n              },\n              {\n                \"TargetGroupArn\": '{{ target_group[1].arn }}',\n                \"Weight\": {{ target_group[1].weight }}\n              }\n            ],\n            \"TargetGroupStickinessConfig\": {\n              \"Enabled\": false\n            }\n          }\n        }\n      ]\n- name: \"Attach to public rule\"\n  shell: |\n    aws elbv2 modify-rule \\\n      --actions '{{ target_rule_setting | to_json }}' \\\n      --rule-arn {{ target_rule }} \\\n      --region {{ Region }}\n\n - name: \"Remove old version\"\n  shell: |\n    aws elbv2 modify-rule \\\n      --actions Type=forward,TargetGroupArn={{ item }} \\\n      --rule-arn {{ LoadBalancer.Release[ansible_loop.index0].Rule }} \\\n      --region {{ Region }}\n  ```\n\n### Step4. 處置舊版本的服務\n\n移轉成功後需要把舊版本的service關機或是移除，我的選擇是暫時關閉\n\n關閉服務聽起來很簡單，但我用aws cli執行將需求值改成0，但....一點效果都沒有！！\n\n還記得一開始設定的autoscaling嗎....沒錯就是他！當你把desired改成0，會跟autoscaling設定的發生衝突所以變得無效\n\n在調整desired改成0前，要把autoscaling設定移除才能順利的關閉service將cluster的資源釋出！\n\n```yaml\n- name: Shutdown ECS service\n  shell: |\n    aws application-autoscaling register-scalable-target \\\n      --service-namespace ecs \\\n      --scalable-dimension ecs:service:DesiredCount \\\n      --resource-id service/{{ current_target_group_result.target_groups[0].tags[\"Cluster\"] }}/{{ current_target_group_result.target_groups[0].tags[\"Name\"] }} \\\n      --min-capacity 0 \\\n      --max-capacity 0 \\\n      --region {{ Region }};\n    aws ecs update-service \\\n      --cluster {{ current_target_group_result.target_groups[0].tags[\"Cluster\"] }} \\\n      --service {{ current_target_group_result.target_groups[0].tags[\"Name\"] }} \\\n      --desired-count 0 \\\n      --region {{ Region }};\n```\n\n### Step5. 移除\n\n這是整個部署流程的尾聲了（或是你可以選擇不做....）\n\n我的做法是先將整個ecs cluster的service列出來，然後取得target group資料，再由target group資料取得tag是否含有`obsolete`的tag\n\n```yaml\n- name: Get obsolete target group info\n  elb_target_group_info:\n    region: \"{{ Region }}\"\n    target_group_arns: \"{{ target_group_arn | json_query('loadBalancers[].targetGroupArn') }}\"\n  register: ecs_tg_result\n\n- name: Delete obsolete ECS service and target group\n  shell: |\n    aws ecs delete-service \\\n      --cluster {{ ecs_tg_result.target_groups[0].tags['Cluster'] }} \\\n      --service {{ ecs_tg_result.target_groups[0].tags['Service'] }} \\\n      --region {{ Region }} ;\n    aws elbv2 delete-target-group \\\n      --target-group-arn {{ ecs_tg_result.target_groups[0].target_group_arn }} \\\n      --region {{ Region }} ;\n    aws elbv2 delete-target-group \\\n      --target-group-arn {{ ecs_tg_result.target_groups[1].target_group_arn }} \\\n      --region {{ Region }} ;\n  when: ecs_tg_result.target_groups[0].tags['Obsolete'] is defined\n```\n\n### Step6. 標記\n\n部署的最後一步，標記已經被關閉的服務變成`obsolete`\n\n這是為了下次部署可以把這些服務刪除，如果前一個步驟不做的話，這個步驟也是可以省略的。\n\n ```yaml\n- name: Configure obsolete target group\n  shell: |\n    aws elbv2 add-tags \\\n      --resource-arns {{ item.target_group_arn }} \\\n      --tags '[{\"Key\": \"Obsolete\", \"Value\": \"yes\"}]' \\\n      --region {{ Region }}\n  loop: \"{{ current_target_group_result.target_groups }}\"\n```\n"},{"id":1597881600,"fileName":"redis-data-types","url":"2020/08/20/redis-data-types","title":"Redis Data Types 介紹","description":"Redis在4.0之前其實只有5個資料型態，不過到了現在新的版本多了一些不同的形態如stream, geo等等，不過本篇只會針對原有的string, sort set, hash set, set, list這五個形態來做說明。","tags":["redis"],"date":"2020-08-20T00:00:00.000Z","published":true,"content":"\n## 前言\n\n這篇文章其實是以前在整理Redis的文件時所做的一些資料，再拿出來寫是因為現在同事剛好也需要這樣的資訊。\n\nRedis在4.0之前其實只有5個資料型態，不過到了現在新的版本多了一些不同的形態如stream, geo等等，不過本篇只會針對原有的string, sort set,\nhash set, set, list這五個形態來做說明。\n\n### String 型別\n\nString 型態可以存放 binary, string, integer, float資料，在官網的說明是最基礎的型態，單一個Key可以存放月512MB的資料。\n\n>Strings are the most basic kind of Redis value. Redis Strings are binary safe,\n>this means that a Redis string can contain any kind of data, for instance a JPEG image or a serialized Ruby object.\n>\n> [redis 官方網站](https://redis.io/topics/data-types)\n\n\n#### String 使用的幾個場景介紹\n\n1. 圖片快取 （使用binary）\n1. Configuration\n1. 累計次數、觀看累計次數\n\n> 不過根據我的使用經驗來說，資料量在1Kb內擁有較好的網路傳輸，當今天你存放的string資料大於1kb，我建議轉換成binary資料，透過Gzip做壓縮\n>才存放到Redis中才會有較好的快取效果\n\n### HashSet\n\nHash set是用來存放一組相同性質的資料，這些資料HashSet(or Dictionary)或是物件的某一屬性，與String較為不同的是他可以取回單一個欄位資料\n但String必須取回所有資料（若透過Redis module可以取得Json特定的資料），單一個Key可以存放2<sup>32</sup> - 1的資料欄位，\n\n> Redis Hashes are maps between string fields and string values, so they are the perfect data type to represent objects\n>(e.g. A User with a number of fields like name, surname, age, and so forth):\n>\n> [redis 官方網站](https://redis.io/topics/data-types)\n\n#### Hashes的使用場景\n\n1. 每次只需要取用一部分的資料\n1. C#的Dictionary或HashSet資料型態\n\n### List\n\nList 資料型態可以想像成程式語言中的Array物件或是你可以把它時作成Queue或是Stack的物件。List 單一個Key可以存放2<sup>32</sup> - 1\n\n> Redis Lists are simply lists of strings, sorted by insertion order.\nIt is possible to add elements to a Redis List pushing new elements on the head (on the left) or on the tail (on the right) of the list.\n>\n> [redis 官方網站](https://redis.io/topics/data-types)\n\n#### List的使用場景\n\n* List 物件\n* 無序資料\n* Queue 物件\n* Stack 物件\n* Array 物件\n\n### Set\n\n類似於List的資料格式但不能存入相同的資料，所以內容是不能重複的預設也不會幫你排序，Sets 單一個Key可以存放2<sup>32</sup> - 1\n\n#### Set的使用場景\n\n1. 文章中的Tag標籤\n1. 用來排除相同資料\n\n### Sorted Set\n\nSorted Set從名字就可以知道他是一個**經過**排序的Set所以當你每次有資料異動時都會自動的為你重新排序採用的是快速排序的演算法，\n這個資料結構可以說是Redis操作的時候成本最高的一個結構吧！通常的時間成本是**O(log(N))**N為Key所存放的資料總量，另外他跟Set很相似內容是不能重複的\n\n> Redis Sorted Sets are, similarly to Redis Sets, non repeating collections of Strings.\n>The difference is that every member of a Sorted Set is associated with score,\n>that is used in order to take the sorted set ordered, from the smallest to the greatest score.\n>While members are unique, scores may be repeated.\n>\n> [redis 官方網站](https://redis.io/topics/data-types)\n\n#### Sorted Set的使用場景\n\n其實也沒什麼好說的，需要有序的資料用他準沒錯\n\n### 其他\n\n其他資料還有Bitmaps, HyperLogLogs, geo, stream等等，目前我也沒有實際使用過，所以就不在此介紹了\n\n### 參考連結\n[Redis Data Types](https://redis.io/topics/data-types)\n"},{"id":1475880255,"fileName":"protobuf-serialize-and-deserialize","url":"2016/10/08/protobuf-serialize-and-deserialize","title":"[ProtoBuf] ProtoBuf Serialize 與 DeSerialize！","description":"這一篇應該是我ProtoBuf的系列文章第二篇，上一篇只簡單說了一些安裝方式與一些定義檔 的設定根本就不知道該如何使用這一個好用的序列化工具。依樣會是使用protobuf-net 這一個套件來做一個簡單的紀錄。","tags":["protobuf","serialize","deserialize"],"published":true,"date":"2016-10-07T22:44:15.000Z","content":"\n這一篇應該是我ProtoBuf的系列文章第二篇，上一篇只簡單說了一些安裝方式與一些定義檔\n的設定根本就不知道該如何使用這一個好用的序列化工具。依樣會是使用protobuf-net\n這一個套件來做一個簡單的紀錄。\n\n## ProtoBuf 序列化\n\n在使用 ProtoBuf 的第一步就必須了解 Stream 的資料格式，因為在(反)序列化\n的過程中，預設都是使用 Stream 作為媒介。序列化的部份是使用 Serializer.Serialize\n這個方法來處理。\n\n### Simple Code 1 - 序列化\n\n```cs\npublic void SerializeToStream<T>(T data, Stream stream)\n{\n    Serializer.Serialize(stream, data)\n}\n\npublic void Main()\n{\n    using (var stream = new MemoryStream())\n    {\n        this.SerializeToStream<object>(data, stream);\n    }\n}\n```\n\n主要原因是若Stream關閉後就無法做任何的操作，所以交由外部來控制Stream的資源初始與回收。\n可以在序列化成為 Array 或 String 的格式。\n\n### Simple Code 2 - Serialize to byte array and string\n\n```cs\npublic byte[] SerializeToBytes<T>(T data)\n{\n    byte[] result;\n    using (var stream = new MemoryStream())\n    {\n        this.SerializeToStream(data, stream);\n        result = stream.ToArray();\n    }\n\n    return result;\n}\n\npublic string SerializeToString<T>(T data)\n{\n    string result;\n    using (var stream = new MemoryStream())\n    {\n        this.SerializeToStream(data, stream);\n        result = Encoding.ASCII.GetString(stream.ToArray());\n    }\n\n    return result;\n}\n```\n\n在Format 成 String 我是採用ASCII的編碼方式，讓他出來會像16進位的感覺。\n\n> 也可以使用 Convert.ToBase64String(stream.ToArray()); 產生文字資料\n\n## ProtoBuf 反序列化\n\n在反序列化的部分也是預設採用 Stream 的資料格式來處理，\n\n### Simple Code 3 - 反序列化\n\n```cs\npublic T SerializeToStream<T>(Stream stream)\n{\n    return Serializer.Deserialize<T>(stream, data)\n}\n```\n\n### Simple Code 4 - 針對 Byte array and string deserialize\n\n```cs\npublic T DeSerializeFromBytes<T>(byte[] data)\n{\n    T result;\n    using (var stream = new MemoryStream(data))\n    {\n        stream.Seek(0, SeekOrigin.Begin);\n        result = this.DeSerializeFromStream<T>(stream);\n    }\n\n    return result;\n}\n\npublic T DeSerializeFromString<T>(string data)\n{\n    return this.DeSerializeFromBytes<T>(Encoding.ASCII.GetBytes(data));\n}\n```\n\n>注： 若string是使用base64字元輸出，那麼在deserialize時就必須使用\n>Convert.FromBase64String(data) 處理\n"},{"id":1475760616,"fileName":"protobuf-first-meet","url":"2016/10/06/protobuf-first-meet","title":"[ProtoBuf] 初次見面","description":"目前會採用ProtoBuf序列化是因為先前使用JSON有效能上的問題與在存取Redis上產生較高的延遲，所以改採用ProtoBuf來作為資料序列化與存放到Redis的主要格式。雖然在閱讀上需要自己寫小工具做轉譯，但在一般情況擁有較好的效能展現。","tags":["protobuf","serialize","deserialize"],"date":"2016-10-06T13:30:16.000Z","published":true,"content":"\n## 什麼是ProtoBuf？\n\n這是一個Google所開發出的資料儲存結構或物件（反）序列的結構（如 JOSN、XML、msgpack等），在官方網站的介紹上有這麼一段：\n> Protocol buffers are Google's language-neutral,\n> platform-neutral, extensible mechanism for serializing structured data\n> – think XML, but smaller, faster, and simpler.\n> You define how you want your data to be structured once,\n> then you can use special generated source code to easily write\n> and read your structured data to and from a variety of data streams and using a variety of languages.\n> <p style=\"text-align:right\"> from <a href=\"https://developers.google.com/protocol-buffers/\" target=\"_blank\">https://developers.google.com/protocol-buffers/</a></p>\n\nProtoBuf支援各種主流的語言(ex: C#, C++, JAVA等)，\n在官方中的[GitHub](https://github.com/google/protobuf)上有目前支援的語言實做，或是Third-party搜尋相關的實做套件。\n\n### ProtoBuf 優點\n\n* (反)序列**速度快**，方便於網路傳輸\n* 產出格式**內容小**，方便存放至檔案或其他Service\n\n### ProtoBuf 缺點\n\n* 二進位格式，難以閱讀\n* 使用上必須先作定義，需要先設定.proto檔案\n\n## 在 C# 中使用 ProtoBuf\n\n在專案中我是使用third-party的套件，[ProtoBuf-net](https://www.nuget.org/packages/protobuf-net)\n套件可以在nuget上找到，會選擇這個套件主要是因為在使用上較為簡便，也支援較多的設定的方式來做資料，設定的方式\n稍後會有比較詳細一些的介紹。\n\n### 定義方式\n\nProtoBuf-net設定的方式支援了以下三種方式\n\n#### Attribute\n\n這個方式，個人認為是一個較好的設定方式，\n\n```cs\n[ProtoContract]\npublic class TestClass\n{\n    [ProtoMember(1)]\n    public int TestA { get; set; }\n\n    [ProtoMember(2)]\n    public string TestB { get; set; }\n\n    [ProtoMember(3)]\n    public TestClassB TestC { get; set; }\n}\n\n[ProtoContract]\npublic class TestClassB\n{\n    ...\n}\n```\n\n這一個設定方式可以修改data model同時修改 Attribute 這樣在團隊使用上可以避免修改data model後\n也可馬上維護protobuf的設定，避免在runtime時因為設定上造成exception。\n\n#### .proto檔案\n\n這一個方式是官方的標準設定，這個需要額外產生一份.proto檔案，定義方式與格式可參考\n[官方網站](https://developers.google.com/protocol-buffers/docs/csharptutorial)\n的設定。\n\n這一個方式因為多產生了一個.proto的檔案，在修改data model後，必須要再額外修改.proto的檔案，\n有時候在開發上會有不一致的情況；在使用上與設定上也相對較為複雜。\n\n#### Runtime 定義\n\n這是在Application執行期間產生一份 RuntimeTypeModel，在Serializer的時候會以這一份RuntimeTypeModel為你的\ndata model做序列化，以下提供語法參考設定方式\n\n這一個方式會將原先定義覆蓋\n\n```cs\n    var metaType = RuntimeTypeModel.Default.Add(typeof(TestClassA), true);\n    metaType.AddSubType(100, typeof(TestA));\n\n    RuntimeTypeModel.Default.Add(typeof(TestA), false);\n```\n\n這一個會複寫(或新增)原先的定義\n```cs\n    var metaType = RuntimeTypeModel.Default;\n    var testA = metaType[typeof(TestClassA)];\n    testA.AddSubType(100, typeof(TestA));\n    metaType.Add(typeof(TestA), false);\n```\n\n## 總結\n\n目前會採用ProtoBuf序列化是因為先前使用JSON有效能上的問題與在存取Redis上產生較高的延遲，所以改採用\nProtoBuf來作為資料序列化與存放到Redis的主要格式。雖然在閱讀上需要自己寫小工具做轉譯，但在一般情況\n擁有較好的效能展現。\n\n\n其他更詳細的介紹可觀看\n[protobuf-net 官方GitHub](https://github.com/mgravell/protobuf-net#advanced-subjects)\n\n## 參考資料\n\n[Level up - protobuf-net - Serialize/DeSerialize data](http://larrynung.github.io/2016/08/23/protobuf-net-Serialize-DeSerialize-data/)\n\n[protobuf-net 官方GitHub](https://github.com/mgravell/protobuf-net)\n\n[Google protobuf](https://github.com/google/protobuf)\n"},{"id":1456314909,"fileName":"redis-pub-sub-application-notification","url":"2016/02/24/redis-pub-sub-application-notification","title":"【Redis】Redis Pub/Sub 製作應用程式間推播通知","description":"在很多時候我們的部屬環境是很複雜的，無法使用單一個應用程式來解決我們的問題...（例如：Windows server與Linux Server、多個網站或多個不同類型執行個體、網站搭配console應用程式）此時當應用程式間需要配合時是一個很重要的議題，很多人會把資料存放到資料庫，應用程式在定期去擷取尚未處理的資料，等相關資料處理完畢後再到資料庫注記哪些記錄是已經處理完畢的，在這樣的軟體設計與環境相對簡單許多，但是在系統繁忙的時間中，這可不是一個樂觀的狀態了..\n現在Redis具有這樣的功能，可以協助我們設計應用程式間可以互相配合的一個機制，如此一來我們就不需要在透過定期存取資料庫，相關的訊息或相關的資料可以及時的處理！","date":"2016-02-24T11:55:09.000Z","tags":["redis","pub","sub","notify"],"published":true,"content":"\n## 寫在前面\n\n在很多時候我們的部屬環境是很複雜的，無法使用單一個應用程式來解決我們的問題...（例如：Windows server與Linux Server、多個網站或多個不同類型執行個體、網站搭配console應用程式）此時當應用程式間需要配合時是一個很重要的議題，很多人會把資料存放到資料庫，應用程式在定期去擷取尚未處理的資料，等相關資料處理完畢後再到資料庫注記哪些記錄是已經處理完畢的，在這樣的軟體設計與環境相對簡單許多，但是在系統繁忙的時間中，這可不是一個樂觀的狀態了..\n\n現在Redis具有這樣的功能，可以協助我們設計應用程式間可以互相配合的一個機制，如此一來我們就不需要在透過定期存取資料庫，相關的訊息或相關的資料可以及時的處理！\n\n## Redis Command\n在使用推播前需要先瞭解三個指令，這三個指令是做應用程式推播時相關的指令\n\n### Publish\n\n#### 官網的說明\n>Available since 2.0.0.\n>\n>**Time complexity**: O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).\n>\n>Postss a message to the given channel.\n\nRedis最低版本：2.0\n這個指令主要的用途就是將訊息推進某一個頻道中。\n而時間複雜度是：O(N+M)，N是訂閱這個頻道的Client數量，M是所有訂閱者的數量。\n\n#### Publish 指令的格式\n```shell\nPublish [channel] [message]\n```\n\n### Subscribe\n\n#### 官網的說明\n>Available since 2.0.0.\n>\n>**Time complexity**: O(N) where N is the number of channels to subscribe to.\n>\n>Subscribes the client to the specified channels.\n\nRedis最低版本：2.0\n這個指令主要的用途是訂閱頻道，用來接收訂閱頻道中的訊息。\n而時間複雜度是：O(N)，N是指要訂閱頻道的總數目\n\n#### Subscribe指令格式\n```shell\nSUBSCRIBE [channel 1] [channel 2] ...\n```\n\n### UnSubscribe\n\n#### 官網的說明\n>Available since 2.0.0.\n>\n>**Time complexity**: O(N) where N is the number of clients already subscribed to a channel.\n>\n>Unsubscribes the client from the given channels, or from all of them if none is given.\n\nRedis最低版本：2.0\n這個指令主要的用途是取消訂閱頻道。\n而時間複雜度是：O(N)，N是指要取消訂閱頻道的總數目\n\n#### UnSubscribe指令格式\n```shell\nUNSUBSCRIBE [channel 1] [channel 2] ...\n```\n\n## 系統開發\n\n### 存取Redis in C#：StackExchange.Redis\n這是一套存取Redis的一個套件，在稍候的程式開發中，都會使用到這個套件來存取Redis！\n\n```cs\nInstall-Package StackExchange.Redis\n```\n\n### Subscribe開發\n\n#### Step1. 連結Redis\n在使用Redis需要先建立connection，才能連結到Redis。再使用StackExchange.Redis 套件時需要先引入他的namespace。\n\n```cs\nusing StackExchange.Redis;\n```\n\n設定Redis連線可以參考[這篇文章](https://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Configuration.md#configuration-options)上面會有參數的說明，這邊沒有一一列舉相關的參數設定。\n\n```cs\nvar configurationOptions = new ConfigurationOptions\n{\n    AbortOnConnectFail = false,\n    Password = \"password\",\n    Ssl = false,\n    ConnectTimeout = 6000,\n    SyncTimeout = 6000\n};\nconfigurationOptions.EndPoints.Add(new DnsEndPoint(\"redis host\", port));\n// IP:\n// configurationOptions.EndPoints.Add(IP Address, port));\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect(configurationOptions);\n```\n\n#### Step2. 訂閱頻道\n在StackExchange.Redis 取得連線後，開始開發訂閱頻道前要先取得Redis的Subcriber，才能發佈或是訂閱訊息\n\n```cs\nvar sub = redis.GetSubscriber();\n```\n\n在訂閱訊息前，先看一下StackExchange.Redis中Subscribe的說明\n第一個參數是頻道名稱，這邊可以直接使用字串來代表RedisChannel的型別，第二個是一個Action的委派型別，第三個是commandFlag，這個主要的用途是在描述指令該如何執行，這個參數可以省略。\n\n這裡做一個範例，我在這裡訂閱了一個Study4TW的頻道，然後指定了收到這個訊息要做哪些事情（寫在Do Something中）\n\n```cs\nsub.Subscribe(\"Study4TW\", (channel, message) =>\n {\n     // Do Something\n });\n```\n\n如此只要寫在系統loading時就可以訂閱到該頻道，這個只要做一次就可以了，不需要每次執行！\n\n#### Step3. 送出訊息！\n送出訊息的指令相當簡單，只要填上你是哪一個頻道，以及你要送出的訊息即可！在RedisChannel與RedisValue兩個型別都可以使用字串來傳遞即可。\n\n```cs\nvar sub = redis.GetSubscriber();\nsub.Publish(\"Study4TW\", message);\n```\n\n在搭配前面Step2的程式碼，在這樣簡單的範例就可以在應用程序間互相通訊了！就不再需要透過資料庫來做訊息通知了，也不用使用IF去判別這一個訊息要怎麼處理或是交給哪一個method處理，增加程式碼的可讀性！是否受用無窮阿？\n\n## 參考資料\n[Redis Pub/Sub](http://redis.io/topics/pubsub)\n\n[Publish - Redis](http://redis.io/commands/publish)\n\n[Subscribe - Redis](http://redis.io/commands/subscribe)\n\n[UnSubscribe - Redis](http://redis.io/commands/unsubscribe)\n\n[StackExchange.Redis GitHub](https://github.com/StackExchange/StackExchange.Redis)\n\n[StackExchange.Redis nuget](https://www.nuget.org/packages/StackExchange.Redis/)\n"}],"allTags":{"vue":1,"nuxt":1,"vite":1,"devops":8,"study4":2,"dotnetconf":2,"aws":5,"frontend":2,"next.js":4,"react":5,"i18n":1,"gatsby.js":1,"postgresql":1,"database":2,"dotnet":1,"prevision":6,"iot":2,"platformio":2,"arduino":2,"esp":1,"elk":3,"azure":4,"vulnerability":1,"ssl":2,"vmss":1,"cd":3,"selenium":2,"tdd":1,"jest":1,"layout":1,"ec2":1,"iac":1,"terraform":1,"ci":1,"jenkins":1,"ecs":1,"ansible":1,"redis":2,"protobuf":2,"serialize":2,"deserialize":2,"pub":1,"sub":1,"notify":1},"total":29},"__N_SSG":true}