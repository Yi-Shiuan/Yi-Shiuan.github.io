{"pageProps":{"posts":[{"id":1617753600,"fileName":"selenium-grid-4","url":"2021/04/07/selenium-grid-4","title":"Selenium Grid 4 體驗","description":"最近在處理系統交接並且升級相關的系統發現了Selenium Grid出了第四版現正Beta時讓我躍躍欲試， 以前Selenium Grid 3.x版本的時候UI說真的不怎麼樣，做了Selenium Grid 4的時候樣式跟整個畫面的設計全改了。 整個畫面看起來舒服了不少，但相關的東西也改了不少讓我一開始做測試的時候跌了不少次","date":"2021-04-07T00:00:00.000Z","tags":["selenium"],"published":true,"content":"\n最近在處理系統交接並且升級相關的系統發現了Selenium Grid出了第四版現正Beta時讓我躍躍欲試，\n以前Selenium Grid 3.x版本的時候UI說真的不怎麼樣，做了Selenium Grid 4的時候樣式跟整個畫面的設計全改了。\n整個畫面看起來舒服了不少，但相關的東西也改了不少讓我一開始做測試的時候跌了不少次\n\n![selenium 4](selenium-grid-4/selenium-4.png)\n\n## Selenium 架構變更\n\n在[Selenium Component](https://www.selenium.dev/documentation/en/grid/grid_4/components_of_a_grid/)文件中就給了一張架構圖，\n跟過去只有HUB跟Node的架構有所差距，在整個部署與調整上擁有了更多彈性。你可以將HUB分散在多台的Server做部署，\n或是你可以使用經典模式的HUB將這些分散的服務集中在HUB中。\n\n新增的component有以下幾個，或者是你可以使用Hub來取代這些新的component\n- Router\n- Distributor\n- Session Map\n- New Session Queuer\n- Event Bus\n\n## Selenium Node Session的改變\n\n在以前Selenium 3.x的時候，我們可以去使用MAX_SESSIONS指定該instance的Session數量，所以在自動化測試的機器叢集中我都直接給10個讓每一個node都具有10個session，\n但這一次改版後即便你加了`SE_NODE_MAX_SESSIONS`的數量，但你的CPU數量不足時也無法產生更多的Session，新版本Node的Session數量取決於你設定的最大Session與CPU最小的那一個\n在官方的github中[這一段說明](https://github.com/SeleniumHQ/docker-selenium#increasing-session-concurrency-per-container)沒仔細看還真的很容易就給他忽略過去\n\n## Dynamic Grid的使用\n\n在新版本的Selenium Grid支援了Dynamic Grid，可以在每一次測試的時候才產生相對應的目標瀏覽器，而不用預先建置好這些瀏覽器的session\n\n在公司的Selenium的測試從集中，都採用docker的方式啟動這個對我來說可以減少在infrastructure的設定與管理\n\n以下分享我的設定，在config.toml的部分讓docker-node可以使用host的docker花了一下功夫\n\n```coffeescript\n# config.toml\n\n[docker]\n# Configs have a mapping between the Docker image to use and the capabilities that need to be matched to\n# start a container with the given image.\nconfigs = [\n    \"selenium/standalone-firefox:4.0.0-beta-3-prerelease-20210402\", \"{\\\"browserName\\\": \\\"firefox\\\"}\",\n    \"selenium/standalone-chrome:4.0.0-beta-3-prerelease-20210402\", \"{\\\"browserName\\\": \\\"chrome\\\"}\",\n    \"selenium/standalone-opera:4.0.0-beta-3-prerelease-20210402\", \"{\\\"browserName\\\": \\\"operablink\\\"}\",\n    \"selenium/standalone-edge:4.0.0-beta-3-prerelease-20210402\", \"{\\\"browserName\\\": \\\"msedge\\\"}\"\n    ]\n\n# URL for connecting to the docker daemon\n# host.docker.internal works for macOS and Windows.\n# Linux could use --net=host in the `docker run` instruction or 172.17.0.1 in the URI below.\n# To have Docker listening through tcp on macOS, install socat and run the following command\n# socat -4 TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock\nurl = \"unix:///var/run/docker.sock\"\n# Docker imagee used for video recording\nvideo-image = \"selenium/video:ffmpeg-4.3.1-20210402\"\n\n# Uncomment the following section if you are running the node on a separate VM\n# Fill out the placeholders with appropriate values\n#[server]\n#host = <ip-from-node-machine>\n#port = <port-from-node-machine>\n\n[selenium official github](https://github.com/SeleniumHQ/docker-selenium#dynamic-grid-)\n```\n\n```yml\nversion: \"3\"\nservices:\n  node-docker:\n    image: selenium/node-docker:4.0.0-beta-3-prerelease-20210402\n    user: root\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./config.toml:/opt/bin/config.toml\n    depends_on:\n      - hub\n    environment:\n      - SE_EVENT_BUS_HOST=hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n      - SE_NODE_OVERRIDE_MAX_SESSIONS=true\n      - SE_NODE_MAX_SESSIONS=10\n  hub:\n    image: selenium/hub:4.0.0-beta-3-prerelease-20210402\n    user: root\n    ports:\n      - \"4442:4442\"\n      - \"4443:4443\"\n      - \"4444:4444\"\n    logging:\n      options:\n        max-size: 100m\n        max-file: \"1\"\n    restart: always\n```\n\n## 參考連結\n\n[Selenium document](https://www.selenium.dev/documentation/en/grid/grid_4/components_of_a_grid/)\n\n[Max sessions](https://github.com/SeleniumHQ/docker-selenium#increasing-session-concurrency-per-container)\n"},{"id":1599350400,"fileName":"jenkins-selenium-grid","url":"2020/09/06/jenkins-selenium-grid","title":"透過Jenkins啟動Selenium Grid執行自動化測試","description":"QA測試當然不是只測試RD這次上線的範圍而已，而是把過去上線的功能都要在驗過一遍才能算是經過QA測試的版本，但是隨著時間的積累線上的系統越來越多 有時候QA無法透過手動的方式完成所有驗證，這時候都會導入自動畫測試selenium來協助QA做完系統的驗證，在目前我服務的公司把CD與自動化測試的部分做了整合， 當QAT部署完成後就會驅動QA的自動化驗證，但是當自動化驗證的Job越來越多一台機器已經很難在3-5分鐘內完成自動化測試怎麼辦？","tags":["ci","selenium","jenkins"],"date":"2020-09-06T00:00:00.000Z","published":true,"content":"\n## 寫在前面\n\n一般我們上線流程都含有QA的測試階段，QA的測試與RD的開發有著很大的區別...\n\nQA測試當然不是只測試RD這次上線的範圍而已，而是把過去上線的功能都要在驗過一遍才能算是`經過QA測試`的版本，但是隨著時間的積累線上的系統越來越多\n有時候QA無法透過手動的方式完成所有驗證，這時候都會導入自動畫測試selenium來協助QA做完系統的驗證，在目前我服務的公司把CD與自動化測試的部分做了整合，\n當QAT部署完成後就會驅動QA的自動化驗證，但是當自動化驗證的Job越來越多一台機器已經很難在3-5分鐘內完成自動化測試怎麼辦？\n\n在網路上很多採用Selenium Grid的人，大多都是有一個需求是`多瀏覽器測試`，目前我們只針對chrome做測試但他也能在多台機器上為我們完成許多\n自動化測試的需求，我們則是因為許多小而美的自動化測試需要被完成\n\n> 在做自動化測試的時候，我的建議是每一次只驗證一項功能是否如我們預期的運作，然後把每個工作都拆分成小的Task來完成\n>\n> 好處是可以透過Selenium Grid同時執行驗證減少時間成本，另外也可以避免某一個功能驗證失效，而導致後面的功能無法驗證\n\n## 架構說明\n\nJenkins我是採用Master跟Agent的方式建制的，Selenium 也適用Hub跟Node的方式建置的\n\n![jenkins 與 Selenium Grid架構圖](jenkins-selenium-grid/jenkins-selenium.png)\n\nJenkins與Selenium均採用docker並結合docker compose起動，這邊是我撰寫的`docker-compose.yml`\n\n> 在Selenium Node的部分是採用linux的版本，主要原因是雲端服務的Windows機器價格比較高，所以在部署服務上以linux為主\n\n```yaml\nversion: '3.7'\nservices:\n  master:\n    image: jenkins/jenkins:2.254\n    logging:\n      options:\n        max-size: 100m\n        max-file: \"1\"\n    restart: always\n    user: root\n    networks:\n      - net\n    ports:\n      - \"80:8080\"\n      - \"50000:50000\"\n    volumes:\n      - jenkins:/var/jenkins_home\n    environment:\n      JAVA_OPTS: -Duser.timezone=Asia/Taipei\n      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8\n\n  test:\n    image: docker.boyu66.cc/common/selenium:4.2\n    user: root\n    logging:\n      options:\n        max-size: 100m\n        max-file: \"1\"\n    networks:\n      - net\n    depends_on:\n      - master\n    restart: always\n    volumes:\n      - test:/home/root\n    environment:\n      JAVA_OPTS: -Duser.timezone=Asia/Taipei\n    command: -url http://jenkins.boyu66.cc -workDir /home/root/agent {secretKey} TestAgent\n\n  hub:\n    image: selenium/hub:3.141.59-20200409\n    user: root\n    ports:\n      - \"4444:4444\"\n    logging:\n      options:\n        max-size: 100m\n        max-file: \"1\"\n    networks:\n      - net\n    depends_on:\n      - master\n    restart: always\n\n  chrome:\n    image: selenium/node-chrome:3.141.59-20200409\n    user: root\n    networks:\n      - net\n    volumes:\n      - /dev/shm:/dev/shm\n    depends_on:\n      - hub\n    environment:\n      NODE_MAX_INSTANCES: 10\n      NODE_APPLICATION_NAME: chrome\n      NODE_MAX_SESSION: 10\n      JAVA_OPTS: -Xmx512m\n\n\nnetworks:\n  net:\n    driver: bridge\n\nvolumes:\n  jenkins:\n  test:\n```\n\n## 建立Jenkins test agent的docker image\n\n在test agent 的dockerfile我選用了ubuntu作為base image，時區的部分設定到了台北並安裝openjdk等等的套件\n\n```dockerfile\nFROM ubuntu:18.04\n\nARG VERSION=4.2\nENV TZ='Asia/Taipei' \\\n    HOME=/home/root\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends software-properties-common \\\n      openjdk-8-jre curl git \\\n      && apt-get clean\n\nRUN curl --create-dirs -fsSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar \\\n      && chmod 755 /usr/share/jenkins \\\n      && chmod 644 /usr/share/jenkins/slave.jar\n\nWORKDIR /home/root\nUSER root\n\n## Jenkins jnlp slave ##\nCOPY jenkins-slave.sh jenkins-slave.sh\n\n\nENTRYPOINT [\"bash\", \"/home/root/jenkins-slave.sh\"]\n```\n\n最後將Jenkins的Job指定到Test Agent上執行，在Selenium的部分把webdriver的設定改道遠端的位置上就可以享受Selenium Grid了！\n\n## 參考資料\n\n[Selenium Grid 中文文黨](https://wizardforcel.gitbooks.io/selenium-doc/content/official-site/selenium-grid.html)\n"}],"allTags":{"git":1,"vue":1,"nuxt":1,"vite":1,"devops":8,"study4":2,"dotnetconf":2,"aws":5,"frontend":2,"next.js":4,"react":5,"i18n":1,"gatsby.js":1,"postgresql":1,"database":2,"dotnet":1,"prevision":6,"iot":2,"platformio":2,"arduino":2,"esp":1,"elk":3,"azure":4,"vulnerability":1,"ssl":2,"vmss":1,"cd":3,"selenium":2,"tdd":1,"jest":1,"layout":1,"ec2":1,"iac":1,"terraform":1,"ci":1,"jenkins":1,"ecs":1,"ansible":1,"redis":2,"protobuf":2,"serialize":2,"deserialize":2,"pub":1,"sub":1,"notify":1}},"__N_SSG":true}