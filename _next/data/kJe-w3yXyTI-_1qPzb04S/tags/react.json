{"pageProps":{"posts":[{"id":1617235200,"fileName":"select-number-tdd","url":"2021/04/01/select-number-tdd","title":"Select Number TDD練習","description":"之前同事去參加面試，在面試的時候有一道上機考的題目，我覺得很有趣並且是一個很好練習的一道題目，一開始我讓我們前端的新人試著寫出這道題， 沒想到所有新人都完成了，所以我想嘗試一下TDD的方式來撰寫這道題目。","date":"2021-04-01T00:00:00.000Z","tags":["tdd","react","jest"],"published":true,"content":"\n之前同事去參加面試，在面試的時候有一道上機考的題目，我覺得很有趣並且是一個很好練習的一道題目，一開始我讓我們前端的新人試著寫出這道題，\n沒想到所有新人都完成了，所以我想嘗試一下TDD的方式來撰寫這道題目。\n\n## 練習題目需求\n\n1. 每一區有1~10個數字，點擊後會變成選取狀態，再次點擊後取消選取\n1. 在畫面上共有4個區域，每個區域都有10個數字，每區選取的號碼不能重複選取(ex: 第一區選擇\"1\"則其他區數字\"1\"為不可選)\n1. 每一區都有一個重置按鈕，點擊後該區選取的數字要被清空，並且所有區可以選取胎數字\n\n## 事後檢討\n\n一開始我的commit是有循序漸進的但後面亂掉了，變成了一個commit有多個事件處理。\n第二個是在重構的時候沒有及時的重構，所以在後面開始出現了很多個重構的commit。\n\n[repo](https://github.com/Yi-Shiuan/select-numbers)\n"},{"id":1610409600,"fileName":"the-react-first-time","url":"2021/01/12/the-react-first-time","title":"React 入門的學習之路","description":"昨天面試一位React新手雖然最後因為一些原因沒有Hire她，但他問了一個問題讓我覺得很棒：可以有什麼方法可以讓我的能力加強嗎？ 在我第一次接觸React距今已經過了好久了，久到我已經忘記我是如何啟動第一個React的APP...但身為一個React開發者又是一位面試官的角色， 未來還會有更多學習React的新手不斷進入，我想好好分享一下在面試一個React的新人時我在乎哪些技能另外也能當作學習React的入門時一個學習路徑","date":"2021-01-12T00:00:00.000Z","tags":["react"],"published":true,"content":"\n昨天面試一位React新手雖然最後因為一些原因沒有Hire她，但他問了一個問題讓我覺得很棒：`可以有什麼方法可以讓我的能力加強嗎？`\n\n在我第一次接觸React距今已經過了好久了，久到我已經忘記我是如何啟動第一個React的APP...但身為一個React開發者又是一位面試官的角色，\n未來還會有更多學習React的新手不斷進入，我想好好分享一下在面試一個React的新人時我在乎哪些技能另外也能當作學習React的入門時一個學習路徑\n\n## Local state的應用\n\n在學習React的第一步，當然建議可以先從`npx create-react-app my-app`開始，當然第一步就是在畫面印出簡單的文字來當作一個進入點，\n在這之後建議可以開始做一個簡單的ToDo List的小專案，來體驗整個React的語法、JSX與Component等等的設計，Function Component與Class Component\n都要體驗一下。\n\n## Global state的使用\n\n在學會了React的local state的應用也做了一個簡單的todo list之後，我建議學習一下Redux或是其他Global state的套件來改寫一下剛才的todo list\n嘗試幾筆新增資料後，在畫面上驅動更新顯示出來\n\n在Global state我建議的是使用Redux與React Hook的Context兩種全域的狀態管理都要學習，畢竟未來進入職場的時候不知道會使用哪一個\n\n## Virtual DOM\n\n在學習Global state之後，當然建議好好惡補一下Virtual DOM這個東西，這對未來的職涯上有很大的幫助，但又偏偏許多人忽略這個東西的養成...\n\n## Fetch API\n\n當Global state上手後，建議練習一下在React的APP中呼叫一下api取得資料與送出資料的練習，畢竟在工作上有很大的概率出現的\n在呼叫API的部分我建議做兩個的練習，一個是使用fetch的方式另一個是axios的套件，然後了解一下這兩個的使用限制與優缺\n\n## Component 的設計\n\n在Global state後，嘗試一下把todo list的Component拆分成多個Component來練習，深入了解一下state與props的相異之處使用條件與限制，\n也把Global state的狀態應用在Component中，嘗試一下使用props與Global state來更新todo list的資料，然後觀察一下其中的差異與變化。\n\n## 生命週期\n\n最後我的建議是React的生命週期，觸發render的時機等等的這些生命週期，這會讓你在React的道路上可以少踩一些地雷或是少遇到一些錯誤。\n\n\n以上是我在近期面試許多React的新手與昨天面試的同學提問後，參與自身的學習經驗來給未來新入React的朋友簡單的一個路徑。\n當然學習路徑有很多但我面試時偏好也會問這類的問題，從中鑑別候選人對React的理解程度。\n\n###\n[建立全新的 React 應用程式](https://zh-hant.reactjs.org/docs/create-a-new-react-app.html)\n"},{"id":1609977600,"fileName":"best-practice-layout-in-nextjs","url":"2021/01/07/best-practice-layout-in-nextjs","title":"Next.js 的Layout最佳配置","description":"新專案即將完成之際，我們開始對各個頁面上的效能與一些過去被我們忽略的問題進行修正， 在這修正的過程中我發現了在每一次頁面切換時都會出現網站的Logo消失又再出現的問題， Logo是一個經常變動的圖片所以在專案中是透過GQL取得Logo的CDN位置後才做渲染的， 再深入排查後才發現原來過去我的觀念不是非常正確所以用這篇來筆記一下正確地處理做法，當作小抄避免未來再犯同樣的錯誤。","date":"2021-01-07T00:00:00.000Z","tags":["react","next.js","frontend","layout"],"published":true,"content":"\n## 前情提要\n\n新專案即將完成之際，我們開始對各個頁面上的效能與一些過去被我們忽略的問題進行修正，\n在這修正的過程中我發現了在每一次頁面切換時都會出現網站的Logo消失又再出現的問題，\nLogo是一個經常變動的圖片所以在專案中是透過GQL取得Logo的CDN位置後才做渲染的，\n再深入排查後才發現原來過去我的觀念不是非常正確所以用這篇來筆記一下正確地處理做法，當作小抄避免未來再犯同樣的錯誤。\n\n## Next.js Layout最佳配置\n\n在Next.js的Layout最佳配置應該是把Layout的component放在`_app.tsx`中，在轉換頁面時就不會再出現前情提要的相關問題了。\n\n```typescript jsx\nfunction App({Component, pageProps }: AppProps): any {\n\tconst apolloClient: any = useApollo(pageProps.initialApolloState);\n\n\treturn <ApolloProvider client={apolloClient}>\n\t\t    <Layout>\n\t\t\t    <Component {...pageProps} />\n\t\t\t</Layout>\n\t\t</ApolloProvider>\n}\n```\n\n```typescript jsx\nconst Index: NextPage<any> = (props: any): any => {\n\treturn <>\n            {/*index content*/}\n\t\t</>\n};\n```\n\n\n### 在得到結論前的一些排查點\n\n在一開始我們的`_app.tsx`與`index.tsx`或其他page都是這樣的設計，在Layout中有`Header`與`Footer`兩個component以及負責所有頁面上的版面配置，\n其中Header這個component中去取得GQL資料，但因為他是屬於React FunctionComponent的範疇，故無法使用getInitialProps這類的function\n\n```typescript jsx\nfunction App({Component, pageProps }: AppProps): any {\n\tconst apolloClient: any = useApollo(pageProps.initialApolloState);\n\n\treturn <ApolloProvider client={apolloClient}>\n\t\t\t<Component {...pageProps} />\n\t\t</ApolloProvider>\n}\n```\n\n```typescript jsx\nconst Index: NextPage<any> = (props: any): any => {\n\treturn <Layout>\n            {/*index content*/}\n\t\t</Layout>\n};\n```\n\n1. 在方案一的我是透過React Memo的方式Cache Layout起來下次使用Layout 這個component時就不會再重新渲染，但結果是仍然每次重新渲染Layout\n1. 在_app.tsx中取得相關的Layout配置所需要的圖檔與文字，透過props的方式傳入給Layout中並讓Header在Server side 渲染，\n但因為progress image的使用所以Logo仍然會有閃一下的情況\n\n然後在官網上看到了這麼一段....\n最後我把Layout放置到`_app.tsx`中，就可以如我們預期的一開始出現了progress image的Logo再出現真正的Logo，在每次轉頁時也沒有重新渲染相關的Layout component\n\n我想主要的幾個原因是，_app.tsx的執行時間以及在轉頁渲染的最小單位是整個Next page不是採用差異的方式重新渲染。\n\n> Next.js uses the App component to initialize pages. You can override it and control the page initialization. Which allows you to do amazing things like:\n>\n> - Persisting layout between page changes\n> - Keeping state when navigating pages\n> - Custom error handling using componentDidCatch\n> - Inject additional data into pages\n> - Add global CSS\n>\n> [Next.js Custom APP](https://nextjs.org/docs/advanced-features/custom-app)\n\n### 相關連結\n\n[Next.js Custom APP](https://nextjs.org/docs/advanced-features/custom-app)\n"}],"allTags":{"gatsby.js":1,"next.js":2,"postgresql":1,"database":2,"dotnet":1,"aws":4,"devops":7,"prevision":6,"iot":2,"platformio":2,"arduino":2,"esp":1,"elk":3,"azure":4,"vulnerability":1,"ssl":2,"vmss":1,"cd":3,"study4":1,"dotnetconf":1,"selenium":2,"tdd":1,"react":3,"jest":1,"frontend":1,"layout":1,"ec2":1,"iac":1,"terraform":1,"ci":1,"jenkins":1,"ecs":1,"ansible":1,"redis":2,"protobuf":2,"serialize":2,"deserialize":2,"pub":1,"sub":1,"notify":1}},"__N_SSG":true}