{"pageProps":{"id":1650412800,"fileName":"azure-self-install","url":"2022/04/20/azure-self-install","title":"Azure 的自動裝機","description":"在之前已經有寫過AWS的裝機處理，這次改用Azure同樣的可以讓系統從scale out到上線不需要人工的處理就可以完成系統的部署與設定","date":"2022-04-20T00:00:00.000Z","tags":{"postgresql":1,"database":2,"dotnet":1,"aws":4,"devops":7,"prevision":6,"iot":2,"platformio":2,"arduino":2,"esp":1,"elk":3,"azure":4,"vulnerability":1,"ssl":2,"vmss":1,"cd":3,"study4":1,"dotnetconf":1,"selenium":2,"tdd":1,"react":3,"jest":1,"next.js":1,"frontend":1,"layout":1,"ec2":1,"iac":1,"terraform":1,"ci":1,"jenkins":1,"ecs":1,"ansible":1,"redis":2,"protobuf":2,"serialize":2,"deserialize":2,"pub":1,"sub":1,"notify":1},"published":true,"content":"\n在之前已經有寫過AWS的裝機處理，這次改用Azure同樣的可以讓系統從scale out到上線不需要人工的處理就可以完成系統的部署與設定\n\n## Azure 的VM Scale Set\n\n在AWS是稱為Auto Scaling Group，在Azure中的名稱是Virtual Machine Scale Set(以下簡稱VMSS)，這也是一個群組設定虛擬機器的規格, 伸縮的條件, 健康檢查等等的設定\n\ncustom_data的資料就是我們準備要設定開機後要執行的腳本，這個設定了以後在azure 的Portal是無法再看到的，所以如果不是使用IaC的話一定要找個地方做紀錄\nAzure的VMSS就有內建的檢查機制(extension區塊)，可以檢查VM的服務是否正確地被啟動，若沒有在時間內被測試成功的話機器會重新收回部署\n\n在terraform 有另一個設定 extension的module， `azurerm_virtual_machine_extension`設定如果要設定`healthRepairExtension`在我測試時是會失敗的，所以一定要在extension區塊中設定。\n\n```config\nresource \"azurerm_linux_virtual_machine_scale_set\" \"sample\" {\n  name                = \"${var.prefix}-vmss\"\n  resource_group_name = data.azurerm_resource_group.main.name\n  location            = data.azurerm_resource_group.main.location\n  zone_balance        = true\n  zones               = [1, 2, 3]\n  sku                 = var.machineSize\n  instances           = var.capacity.minimum\n  admin_username      = \"azureuser\"\n  custom_data         = filebase64(\"${path.module}/custom-data.sh\")\n\n  admin_ssh_key {\n    username   = \"azureuser\"\n    public_key = data.azurerm_ssh_public_key.logstash.public_key\n  }\n\n  automatic_instance_repair {\n    enabled      = true\n    grace_period = \"PT10M\"\n  }\n\n  source_image_reference {\n    publisher = \"canonical\"\n    offer     = \"0001-com-ubuntu-server-focal\"\n    sku       = \"20_04-lts-gen2\"\n    version   = \"latest\"\n  }\n\n  os_disk {\n    storage_account_type = \"Standard_LRS\"\n    caching              = \"ReadWrite\"\n    disk_size_gb         = 30\n  }\n\n  extension {\n    name                      = \"healthRepairExtension\"\n    publisher                 = \"Microsoft.ManagedServices\"\n    type                      = \"ApplicationHealthLinux\"\n    type_handler_version      = \"1.0\"\n    automatic_upgrade_enabled = true\n    settings                  = <<settings\n      {\n        \"protocol\" : \"http\",\n        \"port\" : 80,\n        \"requestPath\" : \"/\"\n      }\n    settings\n  }\n\n  network_interface {\n    name    = \"${var.prefix}-NIC\"\n    primary = true\n\n    ip_configuration {\n      name      = \"internal\"\n      primary   = true\n      subnet_id = azurerm_subnet.subnet.id\n    }\n  }\n\n  tags = {\n    env      = var.environment\n    service  = \"logstash\"\n    createby = \"brunojan\"\n    docker   = \"yes\"\n    date     = formatdate(\"YYYY/MM/DD hh:mm:ss\", timestamp())\n    version  = var.ap_version\n  }\n}\n```\n## VMSS的擴展計畫\n\n在Azure的設定呢，說真的我還沒有非常的理解整個設定，但目前看起來的設定較為麻煩...\n\n在Profile中，一定要有一組預設的設定資料，接下來才能在設定其他的擴展策略，所以我直接hard code一組default的設定，這個設定會是主要的擴展策略。\n其他的設定基本上可以依照特定的時間，或是情境來做設定\n\n在設定中的時間設定在Azure都是使用ISO-8601的設定標準來設定，這個部份對於我來說真的很不順手，也不容易理解...\n\n```config\nresource \"azurerm_monitor_autoscale_setting\" \"autoscale\" {\n  name                = \"${var.prefix}-scale-set\"\n  resource_group_name = data.azurerm_resource_group.main.name\n  location            = data.azurerm_resource_group.main.location\n  target_resource_id  = azurerm_linux_virtual_machine_scale_set.sample.id\n\n  profile {\n    name = \"default\"\n\n    capacity {\n      default = var.capacity.minimum\n      minimum = var.capacity.minimum\n      maximum = var.capacity.maximum\n    }\n\n    dynamic \"rule\" {\n      for_each = length(var.policies) > 0 ? var.policies : []\n      content {\n        metric_trigger {\n          metric_name        = rule.value.metric\n          metric_resource_id = azurerm_linux_virtual_machine_scale_set.sample.id\n          time_grain         = rule.value.grain\n          statistic          = rule.value.statistic\n          time_window        = rule.value.duration\n          time_aggregation   = rule.value.statistic\n          operator           = rule.value.operation\n          threshold          = rule.value.threshold\n          metric_namespace   = \"microsoft.compute/virtualmachinescalesets\"\n        }\n\n        scale_action {\n          direction = rule.value.action\n          type      = \"ChangeCount\"\n          value     = rule.value.count\n          cooldown  = rule.value.cooldown\n        }\n      }\n    }\n  }\n\n  dynamic \"profile\" {\n    for_each = length(var.schedules) > 0 ? var.schedules : []\n\n    content {\n      name = profile.value.name\n\n      capacity {\n        default = profile.value.minimum\n        minimum = profile.value.minimum\n        maximum = profile.value.maximum\n      }\n\n      recurrence {\n        timezone = \"Taipei Standard Time\"\n        days     = profile.value.days\n        hours    = profile.value.hours\n        minutes  = profile.value.minutes\n      }\n\n    }\n  }\n```\n\n## Terraform azurerm_virtual_machine_scale_set\n\n這個在未來的版本中已經被棄用了，所以如果有要使用terraform的記得改用`azurerm_linux_virtual_machine_scale_set`(Linux)與azurerm_windows_virtual_machine_scale_set(Windows)\n設定上基本差不多\n\n## 參考資料\n\n[ISO-8601 wiki](https://en.wikipedia.org/wiki/ISO_8601)\n\n[Terraform azurerm_virtual_machine_scale_set](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_machine_scale_set)\n"},"__N_SSG":true}