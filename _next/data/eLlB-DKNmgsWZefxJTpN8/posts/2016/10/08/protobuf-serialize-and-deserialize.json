{"pageProps":{"id":1475880255,"fileName":"protobuf-serialize-and-deserialize","url":"2016/10/08/protobuf-serialize-and-deserialize","title":"[ProtoBuf] ProtoBuf Serialize 與 DeSerialize！","description":"這一篇應該是我ProtoBuf的系列文章第二篇，上一篇只簡單說了一些安裝方式與一些定義檔 的設定根本就不知道該如何使用這一個好用的序列化工具。依樣會是使用protobuf-net 這一個套件來做一個簡單的紀錄。","tags":["protobuf","serialize","deserialize"],"published":true,"date":"2016-10-07T22:44:15.000Z","content":"\n這一篇應該是我ProtoBuf的系列文章第二篇，上一篇只簡單說了一些安裝方式與一些定義檔\n的設定根本就不知道該如何使用這一個好用的序列化工具。依樣會是使用protobuf-net\n這一個套件來做一個簡單的紀錄。\n\n## ProtoBuf 序列化\n\n在使用 ProtoBuf 的第一步就必須了解 Stream 的資料格式，因為在(反)序列化\n的過程中，預設都是使用 Stream 作為媒介。序列化的部份是使用 Serializer.Serialize\n這個方法來處理。\n\n### Simple Code 1 - 序列化\n\n```cs\npublic void SerializeToStream<T>(T data, Stream stream)\n{\n    Serializer.Serialize(stream, data)\n}\n\npublic void Main()\n{\n    using (var stream = new MemoryStream())\n    {\n        this.SerializeToStream<object>(data, stream);\n    }\n}\n```\n\n主要原因是若Stream關閉後就無法做任何的操作，所以交由外部來控制Stream的資源初始與回收。\n可以在序列化成為 Array 或 String 的格式。\n\n### Simple Code 2 - Serialize to byte array and string\n\n```cs\npublic byte[] SerializeToBytes<T>(T data)\n{\n    byte[] result;\n    using (var stream = new MemoryStream())\n    {\n        this.SerializeToStream(data, stream);\n        result = stream.ToArray();\n    }\n\n    return result;\n}\n\npublic string SerializeToString<T>(T data)\n{\n    string result;\n    using (var stream = new MemoryStream())\n    {\n        this.SerializeToStream(data, stream);\n        result = Encoding.ASCII.GetString(stream.ToArray());\n    }\n\n    return result;\n}\n```\n\n在Format 成 String 我是採用ASCII的編碼方式，讓他出來會像16進位的感覺。\n\n> 也可以使用 Convert.ToBase64String(stream.ToArray()); 產生文字資料\n\n## ProtoBuf 反序列化\n\n在反序列化的部分也是預設採用 Stream 的資料格式來處理，\n\n### Simple Code 3 - 反序列化\n\n```cs\npublic T SerializeToStream<T>(Stream stream)\n{\n    return Serializer.Deserialize<T>(stream, data)\n}\n```\n\n### Simple Code 4 - 針對 Byte array and string deserialize\n\n```cs\npublic T DeSerializeFromBytes<T>(byte[] data)\n{\n    T result;\n    using (var stream = new MemoryStream(data))\n    {\n        stream.Seek(0, SeekOrigin.Begin);\n        result = this.DeSerializeFromStream<T>(stream);\n    }\n\n    return result;\n}\n\npublic T DeSerializeFromString<T>(string data)\n{\n    return this.DeSerializeFromBytes<T>(Encoding.ASCII.GetBytes(data));\n}\n```\n\n>注： 若string是使用base64字元輸出，那麼在deserialize時就必須使用\n>Convert.FromBase64String(data) 處理\n"},"__N_SSG":true}