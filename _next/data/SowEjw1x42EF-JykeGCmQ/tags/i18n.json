{"pageProps":{"posts":[{"id":1670198400,"fileName":"nextjs-i18n-with-react-intl","url":"2022/12/05/nextjs-i18n-with-react-intl","title":"Next.JS 靜態網站 + React-Intl 的 i18n","description":"多國語系在許多網站已經是不可或缺的一個功能，在自己的研究中想做這事件情很久了，在公司的日常開發中也有許多這樣的功能，但前人已經設定好了，沒有從頭來過的感覺 剛好這兩天終於有一個契機與必要實作的需求出現了。於是就把自己實作的步驟記錄下來！","date":"2022-12-05T00:00:00.000Z","tags":["react","next.js","i18n"],"published":true,"content":"\n多國語系在許多網站已經是不可或缺的一個功能，在自己的研究中想做這事件情很久了，在公司的日常開發中也有許多這樣的功能，但前人已經設定好了，沒有從頭來過的感覺\n剛好這兩天終於有一個契機與必要實作的需求出現了。於是就把自己實作的步驟記錄下來！\n\n### 1. 安裝React-intl\n\n```bash\nyarn add react-intl\n```\n\n### 2. 設定next.config.js\n\n開啟next.config.js設定預設的語系以及支援的語系設定，locales是設定支援的語系檔案而 defaultLocale 當沒有傳入語系設定時所使用的預設語系\n\n```js\nmodule.exports = {\n  ...\n  i18n: {\n    locales: ['en', 'tw'],\n    defaultLocale: 'tw',\n  },\n  ...\n};\n```\n\n### 3. 放置語系包的位置\n\n在語系設定上我的檔案會放在`/src/locales`中，裡面的檔案要對應到在**next.config.js**中所設定的語系相同，網站中有需要用到多國語系的語系檔案都可以在這邊設定\n\n語系的檔案結構\n```txt\n.\n├── ...\n├── src\n│   ├── locales\n│   │   ├── en.ts\n│   │   ├── tw.ts\n│   │   └── index.ts\n│   ├── pages\n│   │   ├── _app.ts\n│   └── ...\n└── ...\n```\n語系資料對應後續我們就可以使用`FormattedMessage`的Component來取得該資料值。\n```typescript\n// en.ts檔案設定\nexport const en = {\n    my_title: `Bruno's Jan Tech blogger`\n}\n\n// tw.ts\nexport const tw = {\n    my_title: `Bruno's 技術筆記`\n}\n\n// index.ts\nimport { en } from \"./en\";\nimport { tw } from \"./tw\";\n\nexport const messages: any = {\n    tw,\n    en\n}\n```\n\n### 4. 設定_app.tsx檔案\n\n在_app.tsx中設定`IntlProvider`以及語系包的資料設定\n\n```tsx\nimport { AppProps } from 'next/app';\nimport { useRouter } from 'next/router';\nimport React, { ReactElement } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { messages } from '~/locales';\n\nconst App: any = ({\n                      Component,\n                      pageProps,\n                  }: AppProps) => {\n    const router = useRouter();\n    const {\n        locale,\n        defaultLocale,\n    } = router;\n    const message: any = messages[locale];\n    return <IntlProvider locale={ locale } defaultLocale={ 'tw' } messages={ message }>\n        <Component { ...pageProps } />\n    </IntlProvider>;\n};\n\nexport default App;\n```\n\n接下來就可以在畫面上需要多語言翻譯的位置加上下列程式碼就可以展現多國語系了！\n```tsx\nimport { FormattedMessage } from 'react-intl';\n\n\n<FormattedMessage id='my_title' defaultMessage='My default title' />\n```\n\n### 輸出靜態網站\n\n完成了多語系社的設定以後，當要輸出靜態網站時出現了錯誤...竟然說i18n不支援`next export`！\n\n```bash\n$ next export\ninfo  - using build directory: /Users/Yi-Shiuan/Documents/git/Blogger/.next\ninfo  - Copying \"static build\" directory\ninfo  - No \"exportPathMap\" found in \"/Users/Yi-Shiuan/Documents/git/Blogger/next.config.js\". Generating map from \"./pages\"\nError: i18n support is not compatible with next export. See here for more info on deploying: https://nextjs.org/docs/deployment\n    at /Users/Yi-Shiuan/Documents/git/Blogger/node_modules/next/dist/export/index.js:147:19\n    at async Span.traceAsyncFn (/Users/Yi-Shiuan/Documents/git/Blogger/node_modules/next/dist/trace/trace.js:79:20)\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```\n\n後來在官網中找到了這一段文字..\n\n> Note that Internationalized Routing does not integrate with next export as next export does not leverage the Next.js routing layer.\n> Hybrid Next.js applications that do not use next export are fully supported.\n>\n> [Next.js - Internationalized Routing](https://nextjs.org/docs/advanced-features/i18n-routing#limits-for-the-i18n-config)\n\n好吧，看起來我想輸出靜態網站不支援這樣的設定，所以只好動點手腳讓系統支援他！\n\n用靜態路由的設定來讓他可以支援多國語系\n\n```tsx\nexport const getStaticPaths: GetStaticPaths = async (): Promise<any> => {\n    return {\n        paths: [\n            { params: { lang: 'tw' } },\n            { params: { lang: 'en' } },\n        ],\n        fallback: false,\n    };\n};\n```\n再次修改_app.tsx\n\n使用路由取得語系，再去設定 `IntlProvider`載入的語系設定\n```tsx\nimport { AppProps } from 'next/app';\nimport { useRouter } from 'next/router';\nimport React, { ReactElement } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { messages } from '~/locales';\n\nconst App: any = ({\n                      Component,\n                      pageProps,\n                  }: AppProps) => {\n    library.add(fas, fab);\n    const router = useRouter();\n    const {\n        locale,\n        defaultLocale,\n    } = router;\n    const { lang } = router.query;\n    // @ts-ignore\n    const message: any = messages[lang ?? 'tw'];\n\n    return <IntlProvider locale={ locale ?? 'tw' } defaultLocale={ 'tw' } messages={ message }>\n        <Component { ...pageProps } />\n    </IntlProvider>;\n};\n\nexport default App;\n```\n\n最後移除next.config.js中的設定\n```js\n    i18n: {\n        locales: ['en', 'tw'],\n        defaultLocale: 'tw',\n    },\n```\n\n這樣就可以在靜態網站中擁有多國語系囉！\n\n### 參考資料\n\n[Next.js - Internationalized Routing](https://nextjs.org/docs/advanced-features/i18n-routing#limits-for-the-i18n-config)\n\n[Internationalizing Next.js app with react-intl by Iskren Lalov](https://www.laloov.com/posts/internationalizing-next-js-app-with-react-intl)\n"}],"allTags":{"aws":5,"frontend":2,"next.js":4,"react":5,"i18n":1,"gatsby.js":1,"postgresql":1,"database":2,"dotnet":1,"devops":7,"prevision":6,"iot":2,"platformio":2,"arduino":2,"esp":1,"elk":3,"azure":4,"vulnerability":1,"ssl":2,"vmss":1,"cd":3,"study4":1,"dotnetconf":1,"selenium":2,"tdd":1,"jest":1,"layout":1,"ec2":1,"iac":1,"terraform":1,"ci":1,"jenkins":1,"ecs":1,"ansible":1,"redis":2,"protobuf":2,"serialize":2,"deserialize":2,"pub":1,"sub":1,"notify":1}},"__N_SSG":true}